const fs = require('fs');

console.log('üîß Correction compl√®te des caract√®res d\'encodage corrompus...');

const filePath = process.argv[2] || 'music/queueManager.js';

try {
    // Lire le fichier
    if (!fs.existsSync(filePath)) {
        console.error('‚ùå Fichier non trouv√©:', filePath);
        process.exit(1);
    }

    let content = fs.readFileSync(filePath, 'utf8');
    let corrections = 0;
    
    console.log('üìÑ Fichier lu:', filePath);
    console.log('üìä Taille du fichier:', content.length, 'caract√®res');
    
    // Remplacements pour les caract√®res fran√ßais corrompus
    const replacements = [
        // Caract√®res fran√ßais corrompus
        { from: /√É¬©/g, to: '√©', name: '√© accent aigu' },
        { from: /√É¬®/g, to: '√®', name: '√® accent grave' },
        { from: /√É /g, to: '√†', name: '√† accent grave' },
        { from: /√É¬ß/g, to: '√ß', name: '√ß c√©dille' },
        { from: /√É¬¥/g, to: '√¥', name: '√¥ circonflexe' },
        { from: /√É¬¢/g, to: '√¢', name: '√¢ circonflexe' },
        { from: /√É¬™/g, to: '√™', name: '√™ circonflexe' },
        { from: /√É¬Æ/g, to: '√Æ', name: '√Æ circonflexe' },
        { from: /√É¬ª/g, to: '√ª', name: '√ª circonflexe' },
        { from: /√É¬Ø/g, to: '√Ø', name: '√Ø tr√©ma' },
        { from: /√É¬º/g, to: '√º', name: '√º tr√©ma' },
        { from: /√É¬´/g, to: '√´', name: '√´ tr√©ma' },
        { from: /√É¬∂/g, to: '√∂', name: '√∂ tr√©ma' },
        { from: /√É¬§/g, to: '√§', name: '√§ tr√©ma' },
        { from: /√É¬°/g, to: '√°', name: '√° accent aigu' },
        { from: /√É¬≠/g, to: '√≠', name: '√≠ accent aigu' },
        { from: /√É¬≥/g, to: '√≥', name: '√≥ accent aigu' },
        { from: /√É¬∫/g, to: '√∫', name: '√∫ accent aigu' },
        { from: /√É¬Ω/g, to: '√Ω', name: '√Ω accent aigu' },
        
        // Emojis corrompus restants
        { from: /√¢≈ì‚Ä¶/g, to: '‚úÖ', name: 'checkmark' },
        { from: /√¢≈í/g, to: '‚ùå', name: 'cross' },
        { from: /√¢≈° √Ø¬∏/g, to: '‚ö†Ô∏è', name: 'warning' },
        { from: /√¢≈°¬°/g, to: '‚ö°', name: 'lightning' },
        { from: /√∞≈∏≈°‚Ç¨/g, to: 'üöÄ', name: 'rocket' },
        { from: /√∞≈∏"¬ß/g, to: 'üîß', name: 'wrench' },
        { from: /√∞≈∏"'/g, to: 'üîë', name: 'key' },
        { from: /√∞≈∏"Àú/g, to: 'üìò', name: 'blue book' },
        { from: /√∞≈∏‚Ä†"/g, to: 'üÜî', name: 'id' },
        { from: /√∞≈∏"‚Äπ/g, to: 'üìã', name: 'clipboard' },
        { from: /√∞≈∏"‚Äû/g, to: 'üîÑ', name: 'refresh' },
        { from: /√∞≈∏"‚Äî/g, to: 'üîó', name: 'link' },
        { from: /√∞≈∏"¬≠/g, to: 'üî≠', name: 'telescope' },
        { from: /√∞≈∏"‚Ä∞/g, to: 'üîâ', name: 'volume down' },
        { from: /√∞≈∏""/g, to: 'üîç', name: 'search' },
        { from: /√∞≈∏¬∑√Ø¬∏/g, to: 'üè∑Ô∏è', name: 'label' },
        { from: /√∞≈∏≈Ω¬§/g, to: 'üé§', name: 'microphone' },
        { from: /√∞≈∏≈Ω‚Ä∫√Ø¬∏/g, to: 'üéõÔ∏è', name: 'control knobs' },
        { from: /√∞≈∏≈í≈†/g, to: 'üåä', name: 'wave' },
        { from: /√∞≈∏≈°¬´/g, to: 'üö´', name: 'prohibited' },
        { from: /√∞≈∏'‚Äπ/g, to: 'üëã', name: 'waving hand' },
        { from: /√∞≈∏≈Ω¬Ø/g, to: 'üéØ', name: 'target' },
        { from: /√¢‚Äì¬∂√Ø¬∏/g, to: '‚ñ∂Ô∏è', name: 'play' },
        { from: /√¢¬π√Ø¬∏/g, to: '‚èπÔ∏è', name: 'stop' },
        { from: /√¢¬≠√Ø¬∏/g, to: '‚≠ê', name: 'star' },
        { from: /√¢¬Ø√Ø¬∏/g, to: '‚èØÔ∏è', name: 'play pause' },
        { from: /√∞≈∏≈Ω¬µ/g, to: 'üéµ', name: 'music' },
        { from: /√∞≈∏'¬§/g, to: 'üë§', name: 'user' },
        { from: /√∞≈∏ /g, to: 'üè†', name: 'house' },
        { from: /√∞≈∏"≈†/g, to: 'üîä', name: 'speaker' },
        { from: /√∞≈∏"/g, to: 'üîç', name: 'search' },
        { from: /√∞≈∏"‚Ç¨/g, to: 'üîÄ', name: 'shuffle' }
    ];
    
    let totalErrors = 0;
    
    // Compter les erreurs avant correction
    for (const replacement of replacements) {
        const matches = content.match(replacement.from);
        if (matches) {
            totalErrors += matches.length;
        }
    }
    
    console.log('üîç Erreurs d\'encodage d√©tect√©es:', totalErrors);
    
    if (totalErrors === 0) {
        console.log('‚úÖ Aucune erreur d\'encodage trouv√©e dans le fichier');
        process.exit(0);
    }
    
    // Appliquer les corrections
    for (const replacement of replacements) {
        const matches = content.match(replacement.from);
        if (matches) {
            content = content.replace(replacement.from, replacement.to);
            corrections += matches.length;
            console.log(`üîÑ Corrig√© ${replacement.name}: ${matches.length} occurrences`);
        }
    }
    
    if (corrections > 0) {
        // Sauvegarder le fichier corrig√©
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ Fichier corrig√© avec succ√®s: ${corrections} corrections appliqu√©es`);
        console.log('üìÅ Fichier sauvegard√©:', filePath);
    } else {
        console.log('‚ÑπÔ∏è Aucune correction n√©cessaire');
    }
    
} catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error.message);
    process.exit(1);
}
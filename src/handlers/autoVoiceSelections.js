import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, MessageFlags } from 'discord.js';
import { loadAutoVoiceData, saveAutoVoiceData, updateChannelStats } from './autoVoiceHandlers.js';

// üé® Couleurs pour les embeds
const COLORS = {
    SUCCESS: '#00FF88',
    ERROR: '#FF4444',
    WARNING: '#FFB347',
    INFO: '#5865F2',
    DANGER: '#DC143C'
};

// Gestionnaire pour les s√©lections de menus
async function handleSelectMenuInteraction(interaction) {
    try {
        console.log(`[AUTO-VOICE] üìã Menu s√©lectionn√©: ${interaction.customId} par ${interaction.user.displayName}`);
        
        const [prefix, action, type, channelId] = interaction.customId.split('_');
        const channel = interaction.guild.channels.cache.get(channelId);
        
        if (!channel) {
            return await sendErrorEmbed(interaction, 'Salon introuvable', 'Le salon vocal n\'existe plus ou a √©t√© supprim√©.');
        }

        const autoVoiceData = loadAutoVoiceData();
        const guildId = interaction.guild.id;
        const selectedUserId = interaction.values[0];

        // Trouver les donn√©es du salon
        const channelData = Object.values(autoVoiceData[guildId].userChannels).find(
            data => data.channelId === channelId
        );

        if (!channelData) {
            return await sendErrorEmbed(interaction, 'Donn√©es du salon introuvables', 
                'Ce salon n\'est pas g√©r√© par le syst√®me de salons vocaux automatiques.');
        }

        // V√©rifier les permissions
        const isOwner = channelData.ownerId === interaction.user.id;
        const isAuthorized = channelData.authorizedUsers && channelData.authorizedUsers.includes(interaction.user.id);
        const hasAdminPerms = interaction.member.permissions.has(PermissionFlagsBits.Administrator);
        
        if (!isOwner && !isAuthorized && !hasAdminPerms) {
            return await sendErrorEmbed(interaction, 'Acc√®s refus√©', 'Seul le propri√©taire peut utiliser cette fonction.');
        }

        // Router vers la fonction appropri√©e
        switch (action) {
            case 'kick':
                await handleKickSelect(interaction, channel, channelData, selectedUserId);
                break;
            case 'ban':
                await handleBanSelect(interaction, channel, channelData, selectedUserId);
                break;
            case 'unban':
                await handleUnbanSelect(interaction, channel, channelData, selectedUserId);
                break;
            case 'claim':
                await handleClaimSelect(interaction, channel, channelData, selectedUserId);
                break;
            default:
                await sendErrorEmbed(interaction, 'Action inconnue', `Action de menu non reconnue: ${action}`);
        }

    } catch (error) {
        console.error('[AUTO-VOICE] ‚ùå Erreur dans le gestionnaire de s√©lection:', error);
        await sendSystemErrorEmbed(interaction, error);
    }
}

// ü¶µ Gestionnaire pour les s√©lections de kick
async function handleKickSelect(interaction, channel, channelData, selectedUserId) {
    try {
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        
        const member = await interaction.guild.members.fetch(selectedUserId);
        
        if (!member.voice.channel || member.voice.channel.id !== channel.id) {
            const embed = new EmbedBuilder()
                .setColor(COLORS.WARNING)
                .setTitle('‚ö†Ô∏è **Utilisateur non pr√©sent**')
                .setDescription(`**${member.displayName}** n'est plus dans le salon vocal.`)
                .addFields([
                    { name: 'üí° Information', value: 'L\'utilisateur a peut-√™tre quitt√© le salon entre temps.', inline: false }
                ])
                .setTimestamp();
            
            return await interaction.editReply({ embeds: [embed] });
        }

        // Expulser l'utilisateur
        await member.voice.disconnect('Expuls√© par le propri√©taire du salon');
        
        // Mettre √† jour les statistiques
        updateChannelStats(channel.id, 'kick', selectedUserId);
        
        const embed = new EmbedBuilder()
            .setColor(COLORS.SUCCESS)
            .setTitle('ü¶µ **Membre expuls√© avec succ√®s**')
            .setDescription(`**${member.displayName}** a √©t√© expuls√© du salon vocal.`)
            .addFields([
                { name: 'üë§ Utilisateur expuls√©', value: `${member.user.tag}\n\`ID: ${member.user.id}\``, inline: true },
                { name: 'üéµ Salon', value: `<#${channel.id}>\n\`${channel.name}\``, inline: true },
                { name: '‚ö†Ô∏è Note importante', value: 'L\'utilisateur peut rejoindre √† nouveau sauf s\'il est banni.', inline: false },
                { name: 'üîÑ Actions disponibles', value: '‚Ä¢ Bannir cet utilisateur pour l\'emp√™cher de revenir\n‚Ä¢ Modifier les permissions du salon', inline: false }
            ])
            .setFooter({ text: `Expuls√© par ${interaction.user.displayName}` })
            .setTimestamp();

        // Boutons d'actions suppl√©mentaires
        const actionButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`autovoice_ban_user_${channel.id}_${selectedUserId}`)
                    .setLabel('Bannir cet utilisateur')
                    .setEmoji('üî®')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId(`autovoice_refresh_${channel.id}`)
                    .setLabel('Actualiser le panneau')
                    .setEmoji('üîÑ')
                    .setStyle(ButtonStyle.Secondary)
            );
            
        await interaction.editReply({ embeds: [embed], components: [actionButtons] });
        console.log(`[AUTO-VOICE] ü¶µ ${member.user.tag} expuls√© de ${channel.name} par ${interaction.user.tag}`);
        
    } catch (error) {
        console.error('[AUTO-VOICE] ‚ùå Erreur lors du kick:', error);
        await sendSystemErrorEmbed(interaction, error);
    }
}

// üî® Gestionnaire pour les s√©lections de ban
async function handleBanSelect(interaction, channel, channelData, selectedUserId) {
    try {
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        
        const member = await interaction.guild.members.fetch(selectedUserId);
        const autoVoiceData = loadAutoVoiceData();
        const guildId = interaction.guild.id;
        
        // Ajouter √† la liste noire
        if (!channelData.blacklistedUsers) {
            channelData.blacklistedUsers = [];
        }
        
        if (channelData.blacklistedUsers.includes(selectedUserId)) {
            const embed = new EmbedBuilder()
                .setColor(COLORS.WARNING)
                .setTitle('‚ö†Ô∏è **Utilisateur d√©j√† banni**')
                .setDescription(`**${member.displayName}** est d√©j√† banni de ce salon.`)
                .setTimestamp();
            
            return await interaction.editReply({ embeds: [embed] });
        }
        
        channelData.blacklistedUsers.push(selectedUserId);
        
        // Sauvegarder les donn√©es
        const userChannelKey = Object.keys(autoVoiceData[guildId].userChannels).find(
            key => autoVoiceData[guildId].userChannels[key].channelId === channel.id
        );
        if (userChannelKey) {
            autoVoiceData[guildId].userChannels[userChannelKey] = channelData;
            saveAutoVoiceData(autoVoiceData);
        }
        
        // Expulser l'utilisateur s'il est dans le salon
        if (member.voice.channel && member.voice.channel.id === channel.id) {
            await member.voice.disconnect('Banni par le propri√©taire du salon');
        }
        
        // Retirer les permissions
        await channel.permissionOverwrites.edit(selectedUserId, {
            Connect: false,
            ViewChannel: false
        });
        
        // Mettre √† jour les statistiques
        updateChannelStats(channel.id, 'ban', selectedUserId);
        
        const embed = new EmbedBuilder()
            .setColor(COLORS.DANGER)
            .setTitle('üî® **Membre banni d√©finitivement**')
            .setDescription(`**${member.displayName}** a √©t√© banni de fa√ßon permanente du salon vocal.`)
            .addFields([
                { name: 'üë§ Utilisateur banni', value: `${member.user.tag}\n\`ID: ${member.user.id}\``, inline: true },
                { name: 'üéµ Salon', value: `<#${channel.id}>\n\`${channel.name}\``, inline: true },
                { name: 'üö´ Restrictions appliqu√©es', value: '‚Ä¢ Ne peut plus voir le salon\n‚Ä¢ Ne peut plus se connecter\n‚Ä¢ Expuls√© automatiquement', inline: false },
                { name: 'üîÑ D√©bannissement', value: 'Utilisez le bouton "D√©bannir" pour annuler cette action.', inline: false }
            ])
            .setFooter({ text: `Banni par ${interaction.user.displayName}` })
            .setTimestamp();

        // Boutons d'actions
        const actionButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`autovoice_unban_user_${channel.id}_${selectedUserId}`)
                    .setLabel('D√©bannir cet utilisateur')
                    .setEmoji('üîì')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId(`autovoice_refresh_${channel.id}`)
                    .setLabel('Actualiser le panneau')
                    .setEmoji('üîÑ')
                    .setStyle(ButtonStyle.Secondary)
            );
            
        await interaction.editReply({ embeds: [embed], components: [actionButtons] });
        console.log(`[AUTO-VOICE] üî® ${member.user.tag} banni de ${channel.name} par ${interaction.user.tag}`);
        
    } catch (error) {
        console.error('[AUTO-VOICE] ‚ùå Erreur lors du ban:', error);
        await sendSystemErrorEmbed(interaction, error);
    }
}

// üîì Gestionnaire pour les s√©lections d'unban
async function handleUnbanSelect(interaction, channel, channelData, selectedUserId) {
    try {
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        
        const user = await interaction.client.users.fetch(selectedUserId);
        const autoVoiceData = loadAutoVoiceData();
        const guildId = interaction.guild.id;
        
        // Retirer de la liste noire
        if (channelData.blacklistedUsers) {
            channelData.blacklistedUsers = channelData.blacklistedUsers.filter(id => id !== selectedUserId);
            
            // Sauvegarder les donn√©es
            const userChannelKey = Object.keys(autoVoiceData[guildId].userChannels).find(
                key => autoVoiceData[guildId].userChannels[key].channelId === channel.id
            );
            if (userChannelKey) {
                autoVoiceData[guildId].userChannels[userChannelKey] = channelData;
                saveAutoVoiceData(autoVoiceData);
            }
        }
        
        // Restaurer les permissions
        await channel.permissionOverwrites.edit(selectedUserId, {
            Connect: true,
            ViewChannel: true
        });
        
        // Mettre √† jour les statistiques
        updateChannelStats(channel.id, 'unban', selectedUserId);
        
        const embed = new EmbedBuilder()
            .setColor(COLORS.SUCCESS)
            .setTitle('üîì **Membre d√©banni avec succ√®s**')
            .setDescription(`**${user.displayName || user.username}** a √©t√© d√©banni du salon vocal.`)
            .addFields([
                { name: 'üë§ Utilisateur d√©banni', value: `${user.tag}\n\`ID: ${user.id}\``, inline: true },
                { name: 'üéµ Salon', value: `<#${channel.id}>\n\`${channel.name}\``, inline: true },
                { name: '‚úÖ Permissions restaur√©es', value: '‚Ä¢ Peut voir le salon\n‚Ä¢ Peut se connecter\n‚Ä¢ Acc√®s complet r√©tabli', inline: false },
                { name: 'üí° Information', value: 'L\'utilisateur peut maintenant rejoindre le salon normalement.', inline: false }
            ])
            .setFooter({ text: `D√©banni par ${interaction.user.displayName}` })
            .setTimestamp();

        // Bouton d'action
        const actionButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`autovoice_refresh_${channel.id}`)
                    .setLabel('Actualiser le panneau')
                    .setEmoji('üîÑ')
                    .setStyle(ButtonStyle.Secondary)
            );
            
        await interaction.editReply({ embeds: [embed], components: [actionButtons] });
        console.log(`[AUTO-VOICE] üîì ${user.tag} d√©banni de ${channel.name} par ${interaction.user.tag}`);
        
    } catch (error) {
        console.error('[AUTO-VOICE] ‚ùå Erreur lors de l\'unban:', error);
        await sendSystemErrorEmbed(interaction, error);
    }
}

// üëë Gestionnaire pour les s√©lections de transfert de propri√©t√©
async function handleClaimSelect(interaction, channel, channelData, selectedUserId) {
    try {
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        
        const newOwner = await interaction.guild.members.fetch(selectedUserId);
        const oldOwner = await interaction.guild.members.fetch(channelData.ownerId);
        const autoVoiceData = loadAutoVoiceData();
        const guildId = interaction.guild.id;
        
        // Confirmation avant transfert
        const confirmEmbed = new EmbedBuilder()
            .setColor(COLORS.WARNING)
            .setTitle('üëë **Confirmer le transfert de propri√©t√©**')
            .setDescription('‚ö†Ô∏è **Cette action est irr√©versible !**')
            .addFields([
                { name: 'üë§ Propri√©taire actuel', value: `${oldOwner.displayName}\n\`${oldOwner.user.tag}\``, inline: true },
                { name: 'üëë Nouveau propri√©taire', value: `${newOwner.displayName}\n\`${newOwner.user.tag}\``, inline: true },
                { name: 'üéµ Salon concern√©', value: `<#${channel.id}>\n\`${channel.name}\``, inline: false },
                { name: 'üí• Cons√©quences', value: '‚Ä¢ Vous perdrez le contr√¥le total du salon\n‚Ä¢ Le nouveau propri√©taire aura tous les droits\n‚Ä¢ Vos permissions seront r√©duites √† celles d\'un membre normal\n‚Ä¢ Cette action ne peut pas √™tre annul√©e', inline: false }
            ])
            .setFooter({ text: 'R√©fl√©chissez bien avant de confirmer' })
            .setTimestamp();

        const confirmButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`autovoice_claim_confirm_${channel.id}_${selectedUserId}`)
                    .setLabel('Oui, transf√©rer la propri√©t√©')
                    .setEmoji('üëë')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId(`autovoice_claim_cancel_${channel.id}`)
                    .setLabel('Annuler')
                    .setEmoji('‚ùå')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.editReply({ embeds: [confirmEmbed], components: [confirmButtons] });
        
    } catch (error) {
        console.error('[AUTO-VOICE] ‚ùå Erreur lors du transfert:', error);
        await sendSystemErrorEmbed(interaction, error);
    }
}

// Fonctions utilitaires pour les embeds
async function sendErrorEmbed(interaction, title, description) {
    const embed = new EmbedBuilder()
        .setColor(COLORS.ERROR)
        .setTitle(`‚ùå ${title}`)
        .setDescription(description)
        .setTimestamp();
    
    if (interaction.deferred) {
        await interaction.editReply({ embeds: [embed] });
    } else {
        await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    }
}

async function sendSystemErrorEmbed(interaction, error) {
    const embed = new EmbedBuilder()
        .setColor(COLORS.ERROR)
        .setTitle('‚ùå **Erreur Syst√®me**')
        .setDescription('Une erreur inattendue s\'est produite.')
        .addFields([
            { name: 'üîß D√©tails', value: `\`\`\`\n${error.message || 'Erreur inconnue'}\n\`\`\``, inline: false }
        ])
        .setTimestamp();
    
    if (interaction.deferred) {
        await interaction.editReply({ embeds: [embed] });
    } else {
        await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    }
}

export {
    handleSelectMenuInteraction,
    handleKickSelect,
    handleBanSelect,
    handleUnbanSelect,
    handleClaimSelect
};
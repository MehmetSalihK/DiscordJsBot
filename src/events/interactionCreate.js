// src/events/interactionCreate.js
import { ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, ComponentType, EmbedBuilder } from 'discord.js';
import { getGuildAutoRoleConfig, updateGuildAutoRoleConfig } from '../store/autoRoleStore.js';
import { createSuccessEmbed, createErrorEmbed, createInfoEmbed } from '../utils/embeds.js';
import { sendAutoRoleLog } from '../utils/logs.js';

// Fonction utilitaire pour v√©rifier si une interaction est encore valide
function isInteractionValid(interaction) {
  // V√©rifier si l'interaction n'a pas expir√© (3 secondes pour les interactions de composants)
  const now = Date.now();
  const interactionTime = interaction.createdTimestamp;
  const timeDiff = now - interactionTime;
  
  // Les interactions de composants expirent en 3 secondes
  return timeDiff < 2500; // 2.5 secondes pour √™tre s√ªr
}

// Fonction pour g√©rer les r√©ponses d'interaction de mani√®re s√©curis√©e
async function safeInteractionResponse(interaction, responseData, isDeferred = false) {
  try {
    if (!isInteractionValid(interaction)) {
      console.log('Interaction expir√©e, abandon de la r√©ponse');
      return false;
    }

    if (interaction.deferred) {
      await interaction.editReply(responseData);
    } else if (interaction.replied) {
      await interaction.followUp({ ...responseData, ephemeral: true });
    } else {
      if (interaction.isButton() || interaction.isStringSelectMenu()) {
        await interaction.update(responseData);
      } else {
        await interaction.reply({ ...responseData, ephemeral: true });
      }
    }
    return true;
  } catch (error) {
    console.error('Erreur lors de la r√©ponse s√©curis√©e:', error.message);
    return false;
  }
}

// Fonction pour g√©rer les interactions de boutons
export async function handleButtonInteraction(interaction) {
  if (!interaction.isButton()) return false;
  
  const { customId, guild, member } = interaction;
  
  // V√©rifier si c'est une interaction AutoRole
  if (!customId.startsWith('autorole_')) return false;
  
  // V√©rifier imm√©diatement si l'interaction est valide
  if (!isInteractionValid(interaction)) {
    console.error('Interaction expir√©e d√©tect√©e:', interaction.id);
    return false;
  }
  
  // Diff√©rer imm√©diatement pour √©viter l'expiration
  try {
    await interaction.deferUpdate();
  } catch (error) {
    console.error('Erreur lors du deferUpdate dans handleButtonInteraction:', error);
    return false;
  }
  
  // V√©rifier les permissions administrateur
  if (!member.permissions.has('Administrator')) {
    await safeInteractionResponse(interaction, {
      embeds: [createErrorEmbed('Erreur de permission', 'Vous devez √™tre administrateur pour utiliser ces boutons.')],
      components: []
    });
    return true;
  }
  
  // Extraire l'action du customId
  const action = customId.split('_')[1];
  
  try {
    switch (action) {
      case 'add':
        await handleAddRole(interaction);
        break;
      case 'remove':
        await handleRemoveRole(interaction);
        break;
      case 'toggle':
        await handleToggleAutoRole(interaction);
        break;
      case 'reset':
        await handleResetRoles(interaction);
        break;
      default:
        return false;
    }
    return true;
  } catch (error) {
    console.error('Error in AutoRole button handler:', error);
    
    // V√©rifier si l'interaction n'a pas d√©j√† √©t√© trait√©e
    if (!interaction.replied && !interaction.deferred) {
      try {
        await interaction.update({
          embeds: [createErrorEmbed('Erreur', 'Une erreur est survenue lors du traitement de votre demande.')],
          components: []
        });
      } catch (replyError) {
        console.error('Erreur lors de la r√©ponse d\'erreur:', replyError);
      }
    }
    return true;
  }
}

// Fonction pour g√©rer l'ajout de r√¥le via le bouton
async function handleAddRole(interaction) {
  // Cr√©er un s√©lecteur de r√¥le
  const roleSelect = new StringSelectMenuBuilder()
    .setCustomId('autorole_select_role')
    .setPlaceholder('S√©lectionnez un r√¥le √† ajouter')
    .setMinValues(1)
    .setMaxValues(1);
  
  // Ajouter les r√¥les disponibles
  const roles = Array.from(interaction.guild.roles.cache
    .sort((a, b) => b.position - a.position)
    .filter(role => !role.managed && role.id !== interaction.guild.id)
    .values())
    .slice(0, 25); // Limite de 25 r√¥les dans le menu
  
  if (roles.length === 0) {
    return await safeInteractionResponse(interaction, {
      embeds: [createErrorEmbed('Erreur', 'Aucun r√¥le disponible √† ajouter.')],
      components: []
    });
  }
  
  roles.forEach(role => {
    roleSelect.addOptions([
      {
        label: role.name.length > 100 ? role.name.substring(0, 97) + '...' : role.name,
        value: role.id,
        description: `Ajouter le r√¥le ${role.name}`,
        emoji: 'üé≠'
      }
    ]);
  });
  
  const row = new ActionRowBuilder().addComponents(roleSelect);
  
  await safeInteractionResponse(interaction, {
    content: 'Veuillez s√©lectionner un r√¥le √† ajouter √† l\'AutoRole :',
    components: [row]
  });
}

// Fonction pour g√©rer la suppression de r√¥le via le bouton
async function handleRemoveRole(interaction) {
  const config = await getGuildAutoRoleConfig(interaction.guildId);
  
  if (config.roles.length === 0) {
    return await safeInteractionResponse(interaction, {
      embeds: [createErrorEmbed('Erreur', 'Aucun r√¥le configur√© pour l\'AutoRole.')],
      components: []
    });
  }
  
  // Cr√©er un s√©lecteur de r√¥le avec uniquement les r√¥les configur√©s
  const roleSelect = new StringSelectMenuBuilder()
    .setCustomId('autorole_remove_role')
    .setPlaceholder('S√©lectionnez un r√¥le √† retirer')
    .setMinValues(1)
    .setMaxValues(1);
  
  // Ajouter les r√¥les configur√©s
  config.roles.forEach(roleId => {
    const role = interaction.guild.roles.cache.get(roleId);
    if (role) {
      roleSelect.addOptions([
        {
          label: role.name.length > 100 ? role.name.substring(0, 97) + '...' : role.name,
          value: roleId,
          description: `Retirer ce r√¥le de l'AutoRole`,
          emoji: 'üóëÔ∏è'
        }
      ]);
    }
  });
  
  const row = new ActionRowBuilder().addComponents(roleSelect);
  
  await safeInteractionResponse(interaction, {
    content: 'S√©lectionnez un r√¥le √† retirer de l\'AutoRole :',
    components: [row]
  });
}

// Fonction pour activer/d√©sactiver l'AutoRole
async function handleToggleAutoRole(interaction) {
  const { guild, user } = interaction;
  const config = await getGuildAutoRoleConfig(guild.id);
  const newStatus = !config.active;
  
  // Mettre √† jour la configuration
  await updateGuildAutoRoleConfig(guild.id, { active: newStatus });
  
  // Cr√©er l'embed de r√©ponse
  const responseEmbed = createSuccessEmbed(
    'Param√®tre mis √† jour',
    `L'AutoRole a √©t√© ${newStatus ? 'activ√©' : 'd√©sactiv√©'} avec succ√®s.`
  );
  
  // R√©pondre √† l'interaction
  await safeInteractionResponse(interaction, { 
    embeds: [responseEmbed],
    components: []
  });
  
  // Envoyer un log
  try {
    const logEmbed = new EmbedBuilder()
      .setColor(newStatus ? 0x4CAF50 : 0xF44336)
      .setTitle(`üîß AutoRole ${newStatus ? 'activ√©' : 'd√©sactiv√©'}`)
      .setDescription(`**Mod√©rateur:** ${user} (${user.id})\n**Action:** L'AutoRole a √©t√© ${newStatus ? 'activ√©' : 'd√©sactiv' + (newStatus ? '√©' : 'e')}`)
      .setTimestamp();
      
    await sendAutoRoleLog(interaction.client, guild.id, logEmbed);
  } catch (logError) {
    console.error('Erreur lors de l\'envoi du log de basculement AutoRole:', logError);
  }
}

// Fonction pour r√©initialiser les r√¥les AutoRole
async function handleResetRoles(interaction) {
  const { guild, user } = interaction;
  const config = await getGuildAutoRoleConfig(guild.id);
  const removedRolesCount = config.roles?.length || 0;
  
  // Mettre √† jour la configuration
  await updateGuildAutoRoleConfig(guild.id, { roles: [] });
  
  // Cr√©er l'embed de r√©ponse
  const responseEmbed = createSuccessEmbed(
    'R√©initialisation effectu√©e',
    `Tous les r√¥les AutoRole (${removedRolesCount}) ont √©t√© supprim√©s.`
  );
  
  // R√©pondre √† l'interaction
  await safeInteractionResponse(interaction, { 
    embeds: [responseEmbed],
    components: []
  });
  
  // Envoyer un log si des r√¥les ont √©t√© supprim√©s
  if (removedRolesCount > 0) {
    try {
      const logEmbed = new EmbedBuilder()
        .setColor(0xF44336)
        .setTitle('üóëÔ∏è R√¥les AutoRole r√©initialis√©s')
        .setDescription(`**Mod√©rateur:** ${user} (${user.id})\n**Action:** ${removedRolesCount} r√¥le(s) AutoRole supprim√©(s)`)
        .setTimestamp();
        
      await sendAutoRoleLog(interaction.client, guild.id, logEmbed);
    } catch (logError) {
      console.error('Erreur lors de l\'envoi du log de r√©initialisation AutoRole:', logError);
    }
  }
}

// Fonction pour afficher le panneau AutoRole
async function showAutoRolePanel(interaction) {
  const { guild } = interaction;
  const config = await getGuildAutoRoleConfig(guild.id);
  
  // Pr√©parer la liste des r√¥les
  let rolesList = '*Aucun r√¥le configur√©*';
  let rolesCount = 0;
  
  if (config.roles.length > 0) {
    const validRoles = [];
    
    // V√©rifier chaque r√¥le pour s'assurer qu'il existe toujours
    for (const roleId of config.roles) {
      const role = guild.roles.cache.get(roleId);
      if (role) {
        validRoles.push(`‚Ä¢ ${role} (${role.id})`);
        rolesCount++;
      }
    }
    
    // Mettre √† jour la configuration si des r√¥les invalides ont √©t√© trouv√©s
    if (validRoles.length !== config.roles.length) {
      const validRoleIds = validRoles.map(r => r.match(/\(\d+\)/)[0].slice(1, -1));
      await updateGuildAutoRoleConfig(guild.id, { roles: validRoleIds });
    }
    
    if (validRoles.length > 0) {
      rolesList = validRoles.join('\n');
    }
  }
  
  // Cr√©er l'embed
  const embed = new EmbedBuilder()
    .setColor(0x3498db)
    .setTitle('‚öôÔ∏è Configuration AutoRole')
    .setDescription('G√©rez les r√¥les attribu√©s automatiquement aux nouveaux membres.')
    .addFields(
      { 
        name: 'üìä Statut', 
        value: config.active ? 'üü¢ **Activ√©**\nLes nouveaux membres recevront automatiquement les r√¥les configur√©s.' : 'üî¥ **D√©sactiv√©**\nAucun r√¥le ne sera attribu√© automatiquement.', 
        inline: false 
      },
      { 
        name: `üè∑Ô∏è R√¥les configur√©s (${rolesCount})`, 
        value: rolesList,
        inline: false 
      }
    )
    .setFooter({ text: `ID du serveur: ${guild.id}` })
    .setTimestamp();

  // Cr√©er les boutons
  const addButton = new ButtonBuilder()
    .setCustomId('autorole_add')
    .setLabel('Ajouter un r√¥le')
    .setStyle(ButtonStyle.Primary)
    .setEmoji('‚ûï');
    
  const removeButton = new ButtonBuilder()
    .setCustomId('autorole_remove')
    .setLabel('Retirer un r√¥le')
    .setStyle(ButtonStyle.Danger)
    .setEmoji('‚ûñ')
    .setDisabled(config.roles.length === 0);
    
  const toggleButton = new ButtonBuilder()
    .setCustomId('autorole_toggle')
    .setLabel(config.active ? 'D√©sactiver' : 'Activer')
    .setStyle(config.active ? ButtonStyle.Danger : ButtonStyle.Success)
    .setEmoji(config.active ? '‚ùå' : '‚úÖ');
    
  const resetButton = new ButtonBuilder()
    .setCustomId('autorole_reset')
    .setLabel('R√©initialiser')
    .setStyle(ButtonStyle.Secondary)
    .setEmoji('üîÑ')
    .setDisabled(config.roles.length === 0);
    
  const row = new ActionRowBuilder()
    .addComponents(addButton, removeButton, toggleButton, resetButton);

  // V√©rifier si c'est une mise √† jour ou une nouvelle r√©ponse
  if (interaction.deferred || interaction.replied) {
    await interaction.editReply({
      embeds: [embed],
      components: [row]
    });
  } else if (interaction.isButton()) {
    await safeInteractionResponse(interaction, {
      embeds: [embed],
      components: [row]
    });
  } else {
    await interaction.reply({
      embeds: [embed],
      components: [row],
      ephemeral: true
    });
  }
}

export default {
  name: 'interactionCreate',
  async execute(interaction) {
    try {
      // G√©rer les interactions de boutons
      if (interaction.isButton() && interaction.customId.startsWith('autorole_')) {
        return await handleButtonInteraction(interaction);
      }
      
      // G√©rer les s√©lecteurs de r√¥le
      if (interaction.isStringSelectMenu()) {
        if (interaction.customId === 'autorole_select_role') {
          return await handleRoleSelection(interaction);
        }
        if (interaction.customId === 'autorole_remove_role') {
          return await handleRoleRemoval(interaction);
        }
      }
      
      // G√©rer les commandes slash (au cas o√π elles ne sont pas g√©r√©es ailleurs)
      if (interaction.isChatInputCommand() && interaction.commandName === 'autorole') {
        // La commande slash est d√©j√† g√©r√©e par le fichier de commande
        return;
      }
    } catch (error) {
      console.error('Erreur dans le gestionnaire d\'interactions:', error);
      
      // Cr√©er un embed d'erreur
      const errorEmbed = createErrorEmbed(
        '‚ùå Erreur',
        'Une erreur est survenue lors du traitement de votre demande. Veuillez r√©essayer plus tard.'
      );
      
      // R√©pondre √† l'interaction seulement si elle n'a pas d√©j√† √©t√© trait√©e
      try {
        if (interaction.deferred || interaction.replied) {
          await interaction.followUp({
            embeds: [errorEmbed],
            ephemeral: true
          });
        } else if (interaction.isButton()) {
          await interaction.update({
            embeds: [errorEmbed],
            components: []
          });
        } else {
          await interaction.reply({
            embeds: [errorEmbed],
            ephemeral: true
          });
        }
      } catch (replyError) {
        console.error('Erreur lors de la r√©ponse d\'erreur dans le gestionnaire principal:', replyError);
      }
      
      // Logger l'erreur compl√®te pour le d√©bogage
      console.error('D√©tails de l\'erreur:', {
        guildId: interaction.guildId,
        channelId: interaction.channelId,
        userId: interaction.user.id,
        customId: interaction.customId,
        error: {
          message: error.message,
          stack: error.stack
        }
      });
    }
  }
};

// G√©rer la s√©lection d'un r√¥le √† ajouter
async function handleRoleSelection(interaction) {
  // V√©rifier imm√©diatement si l'interaction est valide
  if (!isInteractionValid(interaction)) {
    console.error('Interaction expir√©e d√©tect√©e dans handleRoleSelection:', interaction.id);
    return;
  }
  
  // Diff√©rer la r√©ponse imm√©diatement
  try {
    await interaction.deferUpdate();
  } catch (error) {
    console.error('Erreur lors du deferUpdate dans handleRoleSelection:', error);
    return;
  }
  
  const { guild, user } = interaction;
  const roleId = interaction.values[0];
  const role = guild.roles.cache.get(roleId);
  
  if (!role) {
    try {
      return await interaction.editReply({
        content: 'Erreur: R√¥le introuvable.',
        components: []
      });
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l\'interaction (r√¥le introuvable):', error);
      return;
    }
  }
  
  const config = await getGuildAutoRoleConfig(guild.id);
  
  // V√©rifier si le r√¥le est d√©j√† dans la liste
  if (config.roles.includes(roleId)) {
    try {
      return await interaction.editReply({
        content: `Le r√¥le ${role} est d√©j√† configur√© pour l'AutoRole.`,
        components: []
      });
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l\'interaction (r√¥le d√©j√† configur√©):', error);
      return;
    }
  }
  
  // Ajouter le r√¥le √† la configuration
  await updateGuildAutoRoleConfig(guild.id, {
    roles: [...config.roles, roleId]
  });
  
  // Mettre √† jour l'interaction
  try {
    await interaction.editReply({
      content: `Le r√¥le ${role} a √©t√© ajout√© √† l'AutoRole avec succ√®s !`,
      components: []
    });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l\'interaction (ajout r√©ussi):', error);
    return;
  }
  
  // Envoyer un log
  try {
    const logEmbed = new EmbedBuilder()
      .setColor(0x4CAF50)
      .setTitle('‚ûï R√¥le AutoRole ajout√©')
      .setDescription(`**Mod√©rateur:** ${user} (${user.id})\n**R√¥le ajout√©:** ${role} (${role.id})\n**Total des r√¥les AutoRole:** ${config.roles.length + 1}`)
      .setTimestamp();
      
    await sendAutoRoleLog(interaction.client, guild.id, logEmbed);
  } catch (logError) {
    console.error('Erreur lors de l\'envoi du log d\'ajout de r√¥le AutoRole:', logError);
  }
}

// G√©rer la suppression d'un r√¥le
async function handleRoleRemoval(interaction) {
  // V√©rifier imm√©diatement si l'interaction est valide
  if (!isInteractionValid(interaction)) {
    console.error('Interaction expir√©e d√©tect√©e dans handleRoleRemoval:', interaction.id);
    return;
  }
  
  // Diff√©rer la r√©ponse imm√©diatement
  try {
    await interaction.deferUpdate();
  } catch (error) {
    console.error('Erreur lors du deferUpdate dans handleRoleRemoval:', error);
    return;
  }
  
  const { guild, user } = interaction;
  const roleId = interaction.values[0];
  const role = guild.roles.cache.get(roleId);
  
  if (!role) {
    try {
      return await interaction.editReply({
        content: 'Erreur: R√¥le introuvable.',
        components: []
      });
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l\'interaction (r√¥le introuvable - suppression):', error);
      return;
    }
  }
  
  const config = await getGuildAutoRoleConfig(guild.id);
  
  // V√©rifier si le r√¥le est dans la liste
  if (!config.roles.includes(roleId)) {
    try {
      return await interaction.editReply({
        content: `Le r√¥le ${role} n'est pas configur√© pour l'AutoRole.`,
        components: []
      });
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l\'interaction (r√¥le non configur√©):', error);
      return;
    }
  }
  
  // Supprimer le r√¥le de la configuration
  await updateGuildAutoRoleConfig(guild.id, {
    roles: config.roles.filter(id => id !== roleId)
  });
  
  // Mettre √† jour l'interaction
  try {
    await interaction.editReply({
      content: `Le r√¥le ${role} a √©t√© retir√© de l'AutoRole avec succ√®s !`,
      components: []
    });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l\'interaction (suppression r√©ussie):', error);
    return;
  }
  
  // Envoyer un log
  try {
    const logEmbed = new EmbedBuilder()
      .setColor(0xF44336)
      .setTitle('‚ûñ R√¥le AutoRole supprim√©')
      .setDescription(`**Mod√©rateur:** ${user} (${user.id})\n**R√¥le supprim√©:** ${role} (${role.id})\n**Total des r√¥les AutoRole restants:** ${config.roles.length - 1}`)
      .setTimestamp();
      
    await sendAutoRoleLog(interaction.client, guild.id, logEmbed);
  } catch (logError) {
    console.error('Erreur lors de l\'envoi du log de suppression de r√¥le AutoRole:', logError);
  }
}

// Exports
export { handleRoleSelection, handleRoleRemoval };

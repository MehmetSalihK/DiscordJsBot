import reactionRoleStore from '../store/reactionRoleStore.js';
import rgbManager from '../utils/rgbManager.js';
import logger from '../utils/logger.js';
import { displayStartupFooter } from '../utils/startup.js';

export default {
    name: 'ready',
    once: true,
    async execute(client) {
        logger.success(`Bot connect√© en tant que ${client.user.tag}`);
        logger.info(`Pr√™t √† servir ${client.users.cache.size} utilisateurs dans ${client.guilds.cache.size} serveurs`);

        // R√©paration automatique du syst√®me ReactionRole
        try {
            logger.info('D√©marrage de la r√©paration automatique du syst√®me ReactionRole...');
            const repairLog = await reactionRoleStore.autoRepair(client);
            
            if (repairLog.length > 0) {
                logger.warn(`R√©parations effectu√©es: ${repairLog.length} probl√®mes d√©tect√©s et corrig√©s`);
                repairLog.forEach(log => logger.warn(`- ${log}`));
            } else {
                logger.success('Aucune r√©paration n√©cessaire - Syst√®me ReactionRole en bon √©tat');
            }
        } catch (error) {
            logger.error('Erreur lors de la r√©paration automatique:', error);
        }

        // Nettoyage des configurations obsol√®tes
        try {
            const cleaned = await reactionRoleStore.cleanup();
            if (cleaned) {
                logger.info('Nettoyage des configurations obsol√®tes effectu√©');
            }
        } catch (error) {
            logger.error('Erreur lors du nettoyage:', error);
        }

        // Afficher les statistiques du syst√®me ReactionRole
        try {
            let totalMessages = 0;
            let totalEntries = 0;
            
            for (const guild of client.guilds.cache.values()) {
                const stats = await reactionRoleStore.getGuildStats(guild.id);
                totalMessages += stats.totalMessages;
                totalEntries += stats.totalReactions;
            }
            
            if (totalMessages > 0) {
                logger.info(`Syst√®me ReactionRole: ${totalMessages} messages avec ${totalEntries} entr√©es configur√©es`);
            }
        } catch (error) {
            logger.error('Erreur lors du calcul des statistiques:', error);
        }





        // Red√©marrage automatique des r√¥les RGB
        try {
            logger.info('üé® [INFO] D√©marrage du syst√®me RGB...');
            const restartedRoles = await rgbManager.restartActiveRoles(client);
            
            if (restartedRoles.length > 0) {
                logger.success(`üé® [SUCC√àS] ${restartedRoles.length} r√¥le(s) RGB red√©marr√©(s) automatiquement`);
                restartedRoles.forEach(roleInfo => {
                    logger.info(`üé® [ACTION] RGB actif pour ${roleInfo.roleName} (${roleInfo.interval}ms)`);
                });
            } else {
                logger.info('üé® [INFO] Aucun r√¥le RGB √† red√©marrer');
            }
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors du red√©marrage des r√¥les RGB:', error);
        }

        // Afficher le footer de d√©marrage
        displayStartupFooter(client);
    }
};
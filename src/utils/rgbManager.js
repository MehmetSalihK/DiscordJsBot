import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import logger from './logger.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class RGBManager {
    constructor() {
        this.activeIntervals = new Map(); // Map<roleId, intervalId>
        this.configPath = path.join(__dirname, '../../json/rgbConfig.json');
        this.client = null;
    }

    setClient(client) {
        this.client = client;
    }

    // Obtenir les r√¥les RGB actifs en m√©moire
    getActiveRoles() {
        return Array.from(this.activeIntervals.keys());
    }

    // Charger la configuration depuis le JSON
    async loadConfig() {
        try {
            const data = await fs.readFile(this.configPath, 'utf8');
            return JSON.parse(data);
        } catch (error) {
            logger.warn('Fichier de configuration RGB non trouv√©, cr√©ation d\'un nouveau fichier');
            await this.saveConfig([]);
            return [];
        }
    }

    // Sauvegarder la configuration dans le JSON
    async saveConfig(config) {
        try {
            await fs.writeFile(this.configPath, JSON.stringify(config, null, 2));
            logger.debug('Configuration RGB sauvegard√©e');
        } catch (error) {
            logger.error('Erreur lors de la sauvegarde de la configuration RGB', error);
        }
    }

    // G√©n√©rer une couleur al√©atoire diff√©rente de la couleur actuelle
    generateRandomColor(currentColor = null) {
        let newColor;
        do {
            newColor = Math.floor(Math.random() * 16777215); // 0xFFFFFF
        } while (newColor === currentColor);
        return newColor;
    }

    // D√©marrer le RGB pour un r√¥le
    async startRGB(guild, roleId, interval = 2000) {
        try {
            const role = guild.roles.cache.get(roleId);
            if (!role) {
                throw new Error('R√¥le non trouv√©');
            }

            // V√©rifier les permissions
            if (!guild.members.me.permissions.has('ManageRoles')) {
                throw new Error('Le bot n\'a pas la permission MANAGE_ROLES');
            }

            if (guild.members.me.roles.highest.position <= role.position) {
                throw new Error('Le r√¥le du bot doit √™tre au-dessus du r√¥le RGB');
            }

            // Arr√™ter l'ancien interval s'il existe
            this.stopRGB(roleId);

            // Charger la configuration
            const config = await this.loadConfig();
            
            // Ajouter ou mettre √† jour le r√¥le dans la configuration
            const existingIndex = config.findIndex(r => r.roleId === roleId);
            const roleConfig = {
                roleId: roleId,
                status: 'active',
                currentColor: role.color,
                interval: interval
            };

            if (existingIndex !== -1) {
                config[existingIndex] = roleConfig;
            } else {
                config.push(roleConfig);
            }

            await this.saveConfig(config);

            // D√©marrer l'interval
            const intervalId = setInterval(async () => {
                try {
                    const currentRole = guild.roles.cache.get(roleId);
                    if (!currentRole) {
                        this.stopRGB(roleId);
                        return;
                    }

                    const newColor = this.generateRandomColor(currentRole.color);
                    await currentRole.setColor(newColor);
                    
                    // Mettre √† jour la couleur dans la configuration
                    const currentConfig = await this.loadConfig();
                    const roleIndex = currentConfig.findIndex(r => r.roleId === roleId);
                    if (roleIndex !== -1) {
                        currentConfig[roleIndex].currentColor = newColor;
                        await this.saveConfig(currentConfig);
                    }

                    logger.info(`üé® [ACTION] Couleur chang√©e pour ${currentRole.name}: #${newColor.toString(16).padStart(6, '0')}`);
                } catch (error) {
                    logger.error(`Erreur lors du changement de couleur pour le r√¥le ${roleId}`, error);
                }
            }, interval);

            this.activeIntervals.set(roleId, intervalId);
            logger.success(`‚úÖ [SUCC√àS] RGB d√©marr√© pour le r√¥le ${role.name} (intervalle: ${interval}ms)`);
            
            return { success: true, message: `RGB d√©marr√© pour le r√¥le ${role.name}` };
        } catch (error) {
            logger.error(`‚ùå [ERREUR] Impossible de d√©marrer le RGB pour le r√¥le ${roleId}`, error);
            return { success: false, message: error.message };
        }
    }

    // Arr√™ter le RGB pour un r√¥le
    async stopRGB(roleId) {
        try {
            // Arr√™ter l'interval
            if (this.activeIntervals.has(roleId)) {
                clearInterval(this.activeIntervals.get(roleId));
                this.activeIntervals.delete(roleId);
            }

            // Supprimer de la configuration
            const config = await this.loadConfig();
            const newConfig = config.filter(r => r.roleId !== roleId);
            await this.saveConfig(newConfig);

            logger.success(`‚úÖ [SUCC√àS] RGB arr√™t√© pour le r√¥le ${roleId}`);
            return { success: true, message: 'RGB arr√™t√© avec succ√®s' };
        } catch (error) {
            logger.error(`‚ùå [ERREUR] Impossible d'arr√™ter le RGB pour le r√¥le ${roleId}`, error);
            return { success: false, message: error.message };
        }
    }

    // Mettre en pause le RGB pour un r√¥le
    async pauseRGB(roleId) {
        try {
            // V√©rifier si le r√¥le est actif en m√©moire
            const wasActive = this.activeIntervals.has(roleId);
            
            // Arr√™ter l'interval temporairement
            if (wasActive) {
                clearInterval(this.activeIntervals.get(roleId));
                this.activeIntervals.delete(roleId);
            }

            // Mettre √† jour ou cr√©er la configuration
            const config = await this.loadConfig();
            const roleIndex = config.findIndex(r => r.roleId === roleId);
            
            if (roleIndex !== -1) {
                // R√¥le trouv√© dans la config, mettre √† jour
                config[roleIndex].status = 'paused';
            } else if (wasActive) {
                // R√¥le actif en m√©moire mais pas dans la config, l'ajouter
                config.push({
                    roleId: roleId,
                    status: 'paused',
                    currentColor: null,
                    interval: 2000 // valeur par d√©faut
                });
            } else {
                // R√¥le ni actif ni dans la config
                return { success: false, message: 'Aucun r√¥le RGB actif trouv√© avec cet ID' };
            }
            
            await this.saveConfig(config);
            logger.success(`‚è∏Ô∏è [SUCC√àS] RGB mis en pause pour le r√¥le ${roleId}`);
            return { success: true, message: 'RGB mis en pause' };
        } catch (error) {
            logger.error(`‚ùå [ERREUR] Impossible de mettre en pause le RGB pour le r√¥le ${roleId}`, error);
            return { success: false, message: error.message };
        }
    }

    // Reprendre le RGB pour un r√¥le
    async resumeRGB(guild, roleId) {
        try {
            const config = await this.loadConfig();
            const roleConfig = config.find(r => r.roleId === roleId);
            
            if (!roleConfig) {
                return { success: false, message: 'R√¥le RGB non trouv√© dans la configuration' };
            }

            if (roleConfig.status === 'active') {
                return { success: false, message: 'Le RGB est d√©j√† actif pour ce r√¥le' };
            }

            // Red√©marrer le RGB avec les param√®tres sauvegard√©s
            return await this.startRGB(guild, roleId, roleConfig.interval);
        } catch (error) {
            logger.error(`‚ùå [ERREUR] Impossible de reprendre le RGB pour le r√¥le ${roleId}`, error);
            return { success: false, message: error.message };
        }
    }

    // Red√©marrer tous les r√¥les RGB actifs (au d√©marrage du bot)
    async restartAllActiveRGB() {
        try {
            const config = await this.loadConfig();
            const activeRoles = config.filter(r => r.status === 'active');
            
            if (activeRoles.length === 0) {
                logger.info('‚ÑπÔ∏è [INFO] Aucun r√¥le RGB actif √† red√©marrer');
                return;
            }

            logger.info(`‚ÑπÔ∏è [INFO] Red√©marrage de ${activeRoles.length} r√¥le(s) RGB actif(s)...`);

            for (const roleConfig of activeRoles) {
                // Trouver le serveur qui contient ce r√¥le
                for (const guild of this.client.guilds.cache.values()) {
                    const role = guild.roles.cache.get(roleConfig.roleId);
                    if (role) {
                        await this.startRGB(guild, roleConfig.roleId, roleConfig.interval);
                        break;
                    }
                }
            }

            logger.success(`‚úÖ [SUCC√àS] ${activeRoles.length} r√¥le(s) RGB red√©marr√©(s) avec succ√®s`);
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors du red√©marrage des r√¥les RGB', error);
        }
    }

    // Red√©marrer les r√¥les RGB actifs avec informations d√©taill√©es
    async restartActiveRoles(client) {
        try {
            this.setClient(client);
            const config = await this.loadConfig();
            const activeRoles = config.filter(r => r.status === 'active');
            const restartedRoles = [];
            
            if (activeRoles.length === 0) {
                return restartedRoles;
            }

            for (const roleConfig of activeRoles) {
                // Trouver le serveur qui contient ce r√¥le
                for (const guild of client.guilds.cache.values()) {
                    const role = guild.roles.cache.get(roleConfig.roleId);
                    if (role) {
                        await this.startRGB(guild, roleConfig.roleId, roleConfig.interval);
                        restartedRoles.push({
                            roleId: roleConfig.roleId,
                            roleName: role.name,
                            interval: roleConfig.interval,
                            guildName: guild.name
                        });
                        break;
                    }
                }
            }

            return restartedRoles;
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors du red√©marrage des r√¥les RGB', error);
            return [];
        }
    }

    // Obtenir tous les r√¥les RGB actifs
    async getActiveRoles() {
        try {
            const config = await this.loadConfig();
            return config;
        } catch (error) {
            logger.error('‚ùå [ERREUR] Impossible de r√©cup√©rer les r√¥les RGB actifs', error);
            return [];
        }
    }

    // V√©rifier si un r√¥le a le RGB actif
    isRGBActive(roleId) {
        return this.activeIntervals.has(roleId);
    }

    // Obtenir le statut d'un r√¥le RGB
    async getRoleStatus(roleId) {
        try {
            const config = await this.loadConfig();
            const roleConfig = config.find(r => r.roleId === roleId);
            return roleConfig ? roleConfig.status : 'inactive';
        } catch (error) {
            return 'inactive';
        }
    }

    // Mettre en pause tous les r√¥les RGB
    async pauseAllRGB() {
        try {
            const config = await this.loadConfig();
            let pausedCount = 0;

            for (const roleConfig of config) {
                if (roleConfig.status === 'active') {
                    await this.pauseRGB(roleConfig.roleId);
                    pausedCount++;
                }
            }

            logger.info(`‚è∏Ô∏è [ACTION] ${pausedCount} r√¥les RGB mis en pause`);
            return { success: true, count: pausedCount };
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors de la pause de tous les r√¥les RGB', error);
            return { success: false, error: error.message };
        }
    }

    // Reprendre tous les r√¥les RGB en pause
    async resumeAllRGB(guild) {
        try {
            const config = await this.loadConfig();
            let resumedCount = 0;

            for (const roleConfig of config) {
                if (roleConfig.status === 'paused') {
                    await this.resumeRGB(guild, roleConfig.roleId);
                    resumedCount++;
                }
            }

            logger.info(`‚ñ∂Ô∏è [ACTION] ${resumedCount} r√¥les RGB repris`);
            return { success: true, count: resumedCount };
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors de la reprise de tous les r√¥les RGB', error);
            return { success: false, error: error.message };
        }
    }

    // Arr√™ter tous les r√¥les RGB
    async stopAllRGB() {
        try {
            const config = await this.loadConfig();
            let stoppedCount = 0;

            for (const roleConfig of config) {
                if (roleConfig.status === 'active' || roleConfig.status === 'paused') {
                    await this.stopRGB(roleConfig.roleId);
                    stoppedCount++;
                }
            }

            logger.info(`‚èπÔ∏è [ACTION] ${stoppedCount} r√¥les RGB arr√™t√©s`);
            return { success: true, count: stoppedCount };
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors de l\'arr√™t de tous les r√¥les RGB', error);
            return { success: false, error: error.message };
        }
    }

    // Supprimer un r√¥le de la configuration RGB
    async removeRole(roleId) {
        try {
            // Arr√™ter le RGB s'il est actif
            await this.stopRGB(roleId);

            // Supprimer de la configuration
            const config = await this.loadConfig();
            const updatedConfig = config.filter(r => r.roleId !== roleId);
            await this.saveConfig(updatedConfig);

            logger.info(`üóëÔ∏è [ACTION] R√¥le ${roleId} supprim√© de la configuration RGB`);
            return { success: true, message: 'R√¥le supprim√© avec succ√®s' };
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors de la suppression du r√¥le RGB', error);
            return { success: false, message: 'Erreur lors de la suppression' };
        }
    }

    // Changer la vitesse d'un r√¥le RGB
    async changeSpeed(roleId, speed) {
        try {
            const config = await this.loadConfig();
            const roleConfig = config.find(r => r.roleId === roleId);

            if (!roleConfig) {
                return { success: false, message: 'R√¥le non trouv√© dans la configuration' };
            }

            // D√©finir les intervalles selon la vitesse
            const intervals = {
                slow: 5000,    // 5 secondes
                normal: 2000,  // 2 secondes (d√©faut)
                fast: 1000     // 1 seconde
            };

            const newInterval = intervals[speed] || intervals.normal;
            roleConfig.interval = newInterval;

            await this.saveConfig(config);

            // Red√©marrer le RGB s'il √©tait actif
            if (roleConfig.status === 'active') {
                await this.stopRGB(roleId);
                await this.startRGB(this.client.guilds.cache.first(), roleId, newInterval);
            }

            logger.info(`‚ö° [ACTION] Vitesse chang√©e pour le r√¥le ${roleId}: ${speed} (${newInterval}ms)`);
            return { success: true, message: `Vitesse chang√©e: ${speed}` };
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors du changement de vitesse', error);
            return { success: false, message: 'Erreur lors du changement de vitesse' };
        }
    }

    // Randomiser la couleur d'un r√¥le RGB
    async randomizeColor(roleId) {
        try {
            const config = await this.loadConfig();
            const roleConfig = config.find(r => r.roleId === roleId);

            if (!roleConfig) {
                return { success: false, message: 'R√¥le non trouv√© dans la configuration' };
            }

            // G√©n√©rer une nouvelle couleur al√©atoire
            const newColor = this.generateRandomColor(roleConfig.currentColor);
            roleConfig.currentColor = newColor;

            await this.saveConfig(config);

            // Appliquer la couleur imm√©diatement si le r√¥le est actif
            if (roleConfig.status === 'active' && this.client) {
                const guild = this.client.guilds.cache.first();
                const role = guild?.roles.cache.get(roleId);
                if (role) {
                    await role.edit({ color: newColor });
                }
            }

            logger.info(`üé≤ [ACTION] Couleur randomis√©e pour le r√¥le ${roleId}: #${newColor.toString(16).padStart(6, '0')}`);
            return { success: true, message: 'Couleur randomis√©e avec succ√®s' };
        } catch (error) {
            logger.error('‚ùå [ERREUR] Erreur lors de la randomisation de couleur', error);
            return { success: false, message: 'Erreur lors de la randomisation' };
        }
    }
}

// Instance singleton
const rgbManager = new RGBManager();
export default rgbManager;
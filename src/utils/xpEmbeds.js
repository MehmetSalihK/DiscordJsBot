import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import XPCalculator from './xpCalculator.js';

/**
 * G√©n√©rateur d'embeds pour le syst√®me XP
 */
export default class XPEmbeds {
    
    /**
     * Cr√©e un embed de profil utilisateur
     */
    static createProfileEmbed(user, member, messageStats, voiceStats, totalXp, globalLevelInfo) {
        const embed = new EmbedBuilder()
            .setColor(0x3498db)
            .setTitle(`üìä Profil XP de ${member.displayName}`)
            .setThumbnail(user.displayAvatarURL({ dynamic: true }))
            .addFields(
                {
                    name: 'üåü **Niveau Global**',
                    value: `\`\`\`yaml\nNiveau: ${globalLevelInfo.level}\nXP Total: ${XPCalculator.formatXP(totalXp)}\nProgression: ${Math.round(globalLevelInfo.progress)}%\`\`\``,
                    inline: true
                },
                {
                    name: 'üí¨ **XP Messages**',
                    value: `\`\`\`fix\n${XPCalculator.formatXP(messageStats.totalXp)} XP\`\`\``,
                    inline: true
                },
                {
                    name: 'üé§ **XP Vocal**',
                    value: `\`\`\`css\n${XPCalculator.formatXP(voiceStats.totalXp)} XP\n${Math.round(voiceStats.totalMinutes)} minutes\`\`\``,
                    inline: true
                }
            )
            .setTimestamp()
            .setFooter({
                text: `Syst√®me XP ‚Ä¢ ${member.guild.name}`,
                iconURL: member.guild.iconURL({ dynamic: true })
            });

        // Ajouter la barre de progression globale
        const progressBar = XPCalculator.generateProgressBar(
            globalLevelInfo.xpInCurrentLevel,
            globalLevelInfo.xpToNextLevel,
            20
        );
        
        embed.addFields({
            name: 'üìà Progression vers le niveau suivant',
            value: `\`${progressBar}\`\n${XPCalculator.formatXP(globalLevelInfo.xpInCurrentLevel)} / ${XPCalculator.formatXP(globalLevelInfo.xpToNextLevel)} XP`,
            inline: false
        });

        // Ajouter des informations suppl√©mentaires
        if (messageStats.lastMessageDate || voiceStats.lastVoiceDate) {
            embed.addFields({
                name: 'üìÖ Derni√®re activit√©',
                value: `**Message:** ${messageStats.lastMessageDate ? `<t:${Math.floor(new Date(messageStats.lastMessageDate).getTime() / 1000)}:R>` : 'Jamais'}\n**Vocal:** ${voiceStats.lastVoiceDate ? `<t:${Math.floor(new Date(voiceStats.lastVoiceDate).getTime() / 1000)}:R>` : 'Jamais'}`,
                inline: false
            });
        }

        return embed;
    }

    /**
     * Cr√©e un embed de classement avec pagination
     */
    static createLeaderboardEmbed(leaderboard, type, page, totalPages, guild) {
        const titles = {
            global: 'üèÜ Classement XP Global',
            message: 'üèÜ Classement XP Messages',
            voice: 'üèÜ Classement XP Vocal'
        };

        const descriptions = {
            global: 'Classement bas√© sur l\'XP total (messages + vocal)',
            message: 'Classement bas√© sur l\'XP de messages',
            voice: 'Classement bas√© sur l\'XP vocal'
        };

        const embed = new EmbedBuilder()
            .setColor(0xf1c40f)
            .setTitle(titles[type] || titles.global)
            .setDescription(descriptions[type] || descriptions.global)
            .setTimestamp()
            .setFooter({
                text: `Page ${page}/${totalPages} ‚Ä¢ Syst√®me XP ‚Ä¢ ${guild.name}`,
                iconURL: guild.iconURL({ dynamic: true })
            });

        return embed;
    }

    /**
     * Formate une entr√©e de classement
     */
    static formatLeaderboardEntry(user, index, type, member) {
        const position = index + 1;
        const medal = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
        const displayName = member ? member.displayName : `Utilisateur ${user.userId}`;
        
        let entry = `${medal} **${displayName}**\n`;
        
        if (type === 'global') {
            entry += `   üåü Niveau ${user.levelInfo.level} ‚Ä¢ ${XPCalculator.formatXP(user.totalXp)} XP\n`;
            entry += `   üí¨ ${XPCalculator.formatXP(user.messageXp)} ‚Ä¢ üé§ ${XPCalculator.formatXP(user.voiceXp)}\n\n`;
        } else {
            entry += `   üåü Niveau ${user.levelInfo.level} ‚Ä¢ ${XPCalculator.formatXP(user.totalXp)} XP\n\n`;
        }
        
        return entry;
    }

    /**
     * Cr√©e les boutons de navigation pour le classement
     */
    static createLeaderboardButtons(page, totalPages, type, disabled = false) {
        const row = new ActionRowBuilder();

        // Bouton premi√®re page
        row.addComponents(
            new ButtonBuilder()
                .setCustomId(`leaderboard_first_${type}`)
                .setLabel('‚èÆÔ∏è')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled || page === 1)
        );

        // Bouton page pr√©c√©dente
        row.addComponents(
            new ButtonBuilder()
                .setCustomId(`leaderboard_prev_${type}`)
                .setLabel('‚óÄÔ∏è')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled || page === 1)
        );

        // Bouton page suivante
        row.addComponents(
            new ButtonBuilder()
                .setCustomId(`leaderboard_next_${type}`)
                .setLabel('‚ñ∂Ô∏è')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled || page === totalPages)
        );

        // Bouton derni√®re page
        row.addComponents(
            new ButtonBuilder()
                .setCustomId(`leaderboard_last_${type}`)
                .setLabel('‚è≠Ô∏è')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled || page === totalPages)
        );

        // Bouton actualiser
        row.addComponents(
            new ButtonBuilder()
                .setCustomId(`leaderboard_refresh_${type}`)
                .setLabel('üîÑ')
                .setStyle(ButtonStyle.Primary)
                .setDisabled(disabled)
        );

        return row;
    }

    /**
     * Cr√©e les boutons de s√©lection de type de classement
     */
    static createLeaderboardTypeButtons(currentType, disabled = false) {
        const row = new ActionRowBuilder();

        row.addComponents(
            new ButtonBuilder()
                .setCustomId('leaderboard_type_global')
                .setLabel('üåü Global')
                .setStyle(currentType === 'global' ? ButtonStyle.Primary : ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        row.addComponents(
            new ButtonBuilder()
                .setCustomId('leaderboard_type_message')
                .setLabel('üí¨ Messages')
                .setStyle(currentType === 'message' ? ButtonStyle.Primary : ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        row.addComponents(
            new ButtonBuilder()
                .setCustomId('leaderboard_type_voice')
                .setLabel('üé§ Vocal')
                .setStyle(currentType === 'voice' ? ButtonStyle.Primary : ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        return row;
    }

    /**
     * Cr√©e un embed de level-up
     */
    static createLevelUpEmbed(user, member, oldLevel, newLevel, totalXp, rewards = []) {
        const embed = new EmbedBuilder()
            .setColor(0xf1c40f)
            .setTitle('üéâ F√©licitations ! Level Up !')
            .setDescription(`**${member.displayName}** vient d'atteindre le **niveau ${newLevel}** !`)
            .setThumbnail(user.displayAvatarURL({ dynamic: true }))
            .addFields(
                {
                    name: 'üìä Progression',
                    value: `**Ancien niveau:** ${oldLevel}\n**Nouveau niveau:** ${newLevel}\n**XP Total:** ${XPCalculator.formatXP(totalXp)}`,
                    inline: true
                }
            )
            .setTimestamp()
            .setFooter({
                text: `Syst√®me XP ‚Ä¢ ${member.guild.name}`,
                iconURL: member.guild.iconURL({ dynamic: true })
            });

        // Ajouter les r√©compenses si il y en a
        if (rewards.length > 0) {
            const rewardText = rewards.map(reward => `<@&${reward.roleId}>`).join('\n');
            embed.addFields({
                name: 'üéÅ R√©compenses d√©bloqu√©es',
                value: rewardText,
                inline: false
            });
        }

        return embed;
    }

    /**
     * Cr√©e un embed de configuration
     */
    static createConfigEmbed(config, guild) {
        const embed = new EmbedBuilder()
            .setColor(0x2ecc71)
            .setTitle('‚öôÔ∏è Configuration du Syst√®me XP')
            .addFields(
                {
                    name: 'üîß Param√®tres G√©n√©raux',
                    value: `**Activ√©:** ${config.enabled ? '‚úÖ' : '‚ùå'}\n**Mode de progression:** ${config.levelThresholds.mode === 'arithmetic' ? 'Arithm√©tique' : 'Personnalis√©'}`,
                    inline: true
                },
                {
                    name: 'üí¨ XP Messages',
                    value: `**XP par message:** ${config.messageXp.minXp}-${config.messageXp.maxXp}\n**Cooldown:** ${config.messageXp.cooldownSeconds}s\n**Longueur min:** ${config.messageXp.minLength} caract√®res`,
                    inline: true
                },
                {
                    name: 'üé§ XP Vocal',
                    value: `**XP par chunk:** ${config.voiceXp.voiceChunkXP}\n**Dur√©e chunk:** ${config.voiceXp.voiceChunkSeconds}s\n**Ignorer AFK:** ${config.voiceXp.ignoreAfkChannel ? '‚úÖ' : '‚ùå'}`,
                    inline: true
                },
                {
                    name: 'üéÅ R√©compenses',
                    value: `**Nombre de r√¥les:** ${config.roleRewards.length}\n**Messages level-up:** ${config.levelUpMessages.enabled ? '‚úÖ' : '‚ùå'}\n**Envoi en DM:** ${config.levelUpMessages.sendInDM ? '‚úÖ' : '‚ùå'}`,
                    inline: true
                },
                {
                    name: 'üö´ Exclusions',
                    value: `**Canaux exclus:** ${config.excludedChannels.length}\n**R√¥les exclus:** ${config.excludedRoles.length}`,
                    inline: true
                }
            )
            .setTimestamp()
            .setFooter({
                text: `Syst√®me XP ‚Ä¢ ${guild.name}`,
                iconURL: guild.iconURL({ dynamic: true })
            });

        return embed;
    }

    /**
     * Cr√©e les boutons de configuration
     */
    static createConfigButtons(disabled = false) {
        const row1 = new ActionRowBuilder();
        const row2 = new ActionRowBuilder();

        row1.addComponents(
            new ButtonBuilder()
                .setCustomId('config_general')
                .setLabel('üîß G√©n√©ral')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        row1.addComponents(
            new ButtonBuilder()
                .setCustomId('config_message_xp')
                .setLabel('üí¨ XP Messages')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        row1.addComponents(
            new ButtonBuilder()
                .setCustomId('config_voice_xp')
                .setLabel('üé§ XP Vocal')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        row2.addComponents(
            new ButtonBuilder()
                .setCustomId('config_rewards')
                .setLabel('üéÅ R√©compenses')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        row2.addComponents(
            new ButtonBuilder()
                .setCustomId('config_exclusions')
                .setLabel('üö´ Exclusions')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(disabled)
        );

        return [row1, row2];
    }

    /**
     * Cr√©e un embed d'erreur
     */
    static createErrorEmbed(title, description, guild = null) {
        const embed = new EmbedBuilder()
            .setColor(0xe74c3c)
            .setTitle(`‚ùå ${title}`)
            .setDescription(description)
            .setTimestamp();

        if (guild) {
            embed.setFooter({
                text: `Syst√®me XP ‚Ä¢ ${guild.name}`,
                iconURL: guild.iconURL({ dynamic: true })
            });
        }

        return embed;
    }

    /**
     * Cr√©e un embed de succ√®s
     */
    static createSuccessEmbed(title, description, guild = null) {
        const embed = new EmbedBuilder()
            .setColor(0x2ecc71)
            .setTitle(`‚úÖ ${title}`)
            .setDescription(description)
            .setTimestamp();

        if (guild) {
            embed.setFooter({
                text: `Syst√®me XP ‚Ä¢ ${guild.name}`,
                iconURL: guild.iconURL({ dynamic: true })
            });
        }

        return embed;
    }

    /**
     * Cr√©e un embed d'information
     */
    static createInfoEmbed(title, description, guild = null) {
        const embed = new EmbedBuilder()
            .setColor(0x3498db)
            .setTitle(`‚ÑπÔ∏è ${title}`)
            .setDescription(description)
            .setTimestamp();

        if (guild) {
            embed.setFooter({
                text: `Syst√®me XP ‚Ä¢ ${guild.name}`,
                iconURL: guild.iconURL({ dynamic: true })
            });
        }

        return embed;
    }

    /**
     * Cr√©e un embed d'aide pour les commandes XP
     */
    static createHelpEmbed(guild) {
        const embed = new EmbedBuilder()
            .setColor(0x3498db)
            .setTitle('üéØ Aide - Commandes XP')
            .setDescription('Voici toutes les commandes disponibles pour le syst√®me XP :')
            .addFields(
                {
                    name: 'üìä Profil',
                    value: '`/xp profil [@utilisateur]` ou `xp profil [@utilisateur]`\nAffiche le profil XP d\'un utilisateur',
                    inline: false
                },
                {
                    name: 'üèÜ Classement',
                    value: '`/xp classement [type]` ou `xp classement [type]`\nAffiche le classement du serveur (global, message, vocal)',
                    inline: false
                },
                {
                    name: '‚öôÔ∏è Configuration',
                    value: '`/xp config` ou `xp config`\nG√®re la configuration du syst√®me (Admin uniquement)',
                    inline: false
                },
                {
                    name: 'üóëÔ∏è Reset',
                    value: '`/xp reset` ou `xp reset`\nRemet √† z√©ro l\'XP d\'un utilisateur (Admin uniquement)',
                    inline: false
                },
                {
                    name: 'üéÅ Donner XP',
                    value: '`/xp give` ou `xp give`\nDonne de l\'XP √† un utilisateur (Admin uniquement)',
                    inline: false
                },
                {
                    name: 'üì• Import/Export',
                    value: '`/xp import` et `/xp export`\nImporte ou exporte les donn√©es XP (Admin uniquement)',
                    inline: false
                }
            )
            .setTimestamp()
            .setFooter({
                text: `Syst√®me XP ‚Ä¢ ${guild.name}`,
                iconURL: guild.iconURL({ dynamic: true })
            });

        return embed;
    }

    /**
     * Cr√©e un embed de statistiques du serveur
     */
    static createServerStatsEmbed(stats, guild) {
        const embed = new EmbedBuilder()
            .setColor(0x9b59b6)
            .setTitle('üìà Statistiques du Serveur')
            .addFields(
                {
                    name: 'üë• Utilisateurs Actifs',
                    value: `**Total:** ${stats.totalUsers}\n**Avec XP Messages:** ${stats.messageUsers}\n**Avec XP Vocal:** ${stats.voiceUsers}`,
                    inline: true
                },
                {
                    name: 'üí¨ Messages',
                    value: `**Total XP:** ${XPCalculator.formatXP(stats.totalMessageXp)}\n**Messages envoy√©s:** ${stats.totalMessages}\n**Moyenne par utilisateur:** ${Math.round(stats.avgMessageXp)}`,
                    inline: true
                },
                {
                    name: 'üé§ Vocal',
                    value: `**Total XP:** ${XPCalculator.formatXP(stats.totalVoiceXp)}\n**Temps total:** ${Math.round(stats.totalVoiceMinutes)}min\n**Moyenne par utilisateur:** ${Math.round(stats.avgVoiceXp)}`,
                    inline: true
                },
                {
                    name: 'üèÜ Niveaux',
                    value: `**Niveau max:** ${stats.maxLevel}\n**Niveau moyen:** ${Math.round(stats.avgLevel * 10) / 10}\n**Utilisateurs niveau 10+:** ${stats.highLevelUsers}`,
                    inline: true
                }
            )
            .setTimestamp()
            .setFooter({
                text: `Syst√®me XP ‚Ä¢ ${guild.name}`,
                iconURL: guild.iconURL({ dynamic: true })
            });

        return embed;
    }
}
import xpDataManager from './xpDataManager.js';

/**
 * Gestionnaire des r√©compenses de r√¥les par niveau
 */
export default class RoleRewardManager {
    
    /**
     * V√©rifie et attribue les r√©compenses de r√¥les pour un utilisateur
     * @param {Guild} guild - Le serveur Discord
     * @param {string} userId - L'ID de l'utilisateur
     * @param {number} newLevel - Le nouveau niveau de l'utilisateur
     * @param {number} oldLevel - L'ancien niveau de l'utilisateur
     * @returns {Promise<Array>} - Liste des r√©compenses attribu√©es
     */
    static async checkAndAwardRoles(guild, userId, newLevel, oldLevel = 0) {
        try {
            const config = await xpDataManager.getLevelConfig();
            const member = await guild.members.fetch(userId).catch(() => null);
            
            if (!member || !config.roleRewards || config.roleRewards.length === 0) {
                return [];
            }

            const rewardsToGive = [];
            const rewardsToRemove = [];

            // Parcourir toutes les r√©compenses configur√©es
            for (const reward of config.roleRewards) {
                const role = guild.roles.cache.get(reward.roleId);
                if (!role) {
                    console.warn(`[ROLE-REWARDS] ‚ö†Ô∏è R√¥le ${reward.roleId} introuvable pour le niveau ${reward.level}`);
                    continue;
                }

                const hasRole = member.roles.cache.has(reward.roleId);

                // Si l'utilisateur atteint le niveau requis et n'a pas le r√¥le
                if (newLevel >= reward.level && !hasRole) {
                    rewardsToGive.push(reward);
                }
                // Si l'utilisateur n'atteint plus le niveau requis et a le r√¥le (pour les r√¥les temporaires)
                else if (newLevel < reward.level && hasRole && reward.removeOnLevelDown) {
                    rewardsToRemove.push(reward);
                }
            }

            // Attribuer les nouveaux r√¥les
            for (const reward of rewardsToGive) {
                try {
                    const role = guild.roles.cache.get(reward.roleId);
                    await member.roles.add(role, `R√©compense XP - Niveau ${reward.level} atteint`);
                    console.log(`[ROLE-REWARDS] ‚úÖ R√¥le ${role.name} attribu√© √† ${member.user.tag} (niveau ${newLevel})`);
                } catch (error) {
                    console.error(`[ROLE-REWARDS] ‚ùå Erreur lors de l'attribution du r√¥le ${reward.roleId}:`, error);
                }
            }

            // Retirer les r√¥les si n√©cessaire
            for (const reward of rewardsToRemove) {
                try {
                    const role = guild.roles.cache.get(reward.roleId);
                    await member.roles.remove(role, `R√©compense XP - Niveau ${reward.level} non atteint`);
                    console.log(`[ROLE-REWARDS] ‚ûñ R√¥le ${role.name} retir√© de ${member.user.tag} (niveau ${newLevel})`);
                } catch (error) {
                    console.error(`[ROLE-REWARDS] ‚ùå Erreur lors du retrait du r√¥le ${reward.roleId}:`, error);
                }
            }

            return rewardsToGive;

        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la v√©rification des r√©compenses:', error);
            return [];
        }
    }

    /**
     * Synchronise tous les r√¥les d'un utilisateur avec son niveau actuel
     * @param {Guild} guild - Le serveur Discord
     * @param {string} userId - L'ID de l'utilisateur
     * @param {number} currentLevel - Le niveau actuel de l'utilisateur
     * @returns {Promise<Object>} - R√©sultat de la synchronisation
     */
    static async syncUserRoles(guild, userId, currentLevel) {
        try {
            const config = await xpDataManager.getLevelConfig();
            const member = await guild.members.fetch(userId).catch(() => null);
            
            if (!member || !config.roleRewards || config.roleRewards.length === 0) {
                return { added: [], removed: [], errors: [] };
            }

            const result = {
                added: [],
                removed: [],
                errors: []
            };

            // Parcourir toutes les r√©compenses configur√©es
            for (const reward of config.roleRewards) {
                const role = guild.roles.cache.get(reward.roleId);
                if (!role) {
                    result.errors.push(`R√¥le ${reward.roleId} introuvable`);
                    continue;
                }

                const hasRole = member.roles.cache.has(reward.roleId);
                const shouldHaveRole = currentLevel >= reward.level;

                try {
                    // Ajouter le r√¥le si n√©cessaire
                    if (shouldHaveRole && !hasRole) {
                        await member.roles.add(role, `Synchronisation XP - Niveau ${currentLevel}`);
                        result.added.push(reward);
                        console.log(`[ROLE-REWARDS] ‚úÖ R√¥le ${role.name} ajout√© lors de la sync pour ${member.user.tag}`);
                    }
                    // Retirer le r√¥le si n√©cessaire (seulement si removeOnLevelDown est activ√©)
                    else if (!shouldHaveRole && hasRole && reward.removeOnLevelDown) {
                        await member.roles.remove(role, `Synchronisation XP - Niveau ${currentLevel}`);
                        result.removed.push(reward);
                        console.log(`[ROLE-REWARDS] ‚ûñ R√¥le ${role.name} retir√© lors de la sync pour ${member.user.tag}`);
                    }
                } catch (error) {
                    result.errors.push(`Erreur avec le r√¥le ${role.name}: ${error.message}`);
                    console.error(`[ROLE-REWARDS] ‚ùå Erreur lors de la sync du r√¥le ${reward.roleId}:`, error);
                }
            }

            return result;

        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la synchronisation des r√¥les:', error);
            return { added: [], removed: [], errors: [error.message] };
        }
    }

    /**
     * Synchronise tous les utilisateurs du serveur avec leurs niveaux actuels
     * @param {Guild} guild - Le serveur Discord
     * @param {Function} progressCallback - Callback pour suivre le progr√®s (optionnel)
     * @returns {Promise<Object>} - R√©sultat de la synchronisation globale
     */
    static async syncAllUsers(guild, progressCallback = null) {
        try {
            const messageXPHandler = (await import('./messageXpHandler.js')).default;
            const voiceXPHandler = (await import('./voiceXpHandler.js')).default;
            const XPCalculator = (await import('./xpCalculator.js')).default;

            // R√©cup√©rer tous les utilisateurs avec de l'XP
            const messageLeaderboard = await messageXPHandler.getLeaderboard(guild.id, 1000);
            const voiceLeaderboard = await voiceXPHandler.getVoiceLeaderboard(guild.id, 1000);

            // Cr√©er un map pour combiner les XP
            const allUsers = new Map();
            
            messageLeaderboard.forEach(user => {
                allUsers.set(user.userId, {
                    userId: user.userId,
                    messageXp: user.totalXp,
                    voiceXp: 0
                });
            });
            
            voiceLeaderboard.forEach(user => {
                if (allUsers.has(user.userId)) {
                    allUsers.get(user.userId).voiceXp = user.totalXp;
                } else {
                    allUsers.set(user.userId, {
                        userId: user.userId,
                        messageXp: 0,
                        voiceXp: user.totalXp
                    });
                }
            });

            const totalUsers = allUsers.size;
            let processedUsers = 0;
            const result = {
                totalUsers,
                processedUsers: 0,
                totalAdded: 0,
                totalRemoved: 0,
                errors: []
            };

            console.log(`[ROLE-REWARDS] üîÑ D√©but de la synchronisation pour ${totalUsers} utilisateurs`);

            // Traiter chaque utilisateur
            for (const [userId, userData] of allUsers) {
                try {
                    const totalXp = userData.messageXp + userData.voiceXp;
                    const levelInfo = await XPCalculator.getUserLevelInfo(totalXp);
                    
                    const syncResult = await this.syncUserRoles(guild, userId, levelInfo.level);
                    
                    result.totalAdded += syncResult.added.length;
                    result.totalRemoved += syncResult.removed.length;
                    result.errors.push(...syncResult.errors);
                    
                    processedUsers++;
                    result.processedUsers = processedUsers;

                    // Appeler le callback de progr√®s si fourni
                    if (progressCallback) {
                        progressCallback(processedUsers, totalUsers, userId);
                    }

                    // Petite pause pour √©viter de surcharger l'API Discord
                    if (processedUsers % 10 === 0) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }

                } catch (error) {
                    result.errors.push(`Erreur pour l'utilisateur ${userId}: ${error.message}`);
                    console.error(`[ROLE-REWARDS] ‚ùå Erreur lors de la sync de l'utilisateur ${userId}:`, error);
                }
            }

            console.log(`[ROLE-REWARDS] ‚úÖ Synchronisation termin√©e: ${result.totalAdded} r√¥les ajout√©s, ${result.totalRemoved} r√¥les retir√©s, ${result.errors.length} erreurs`);
            return result;

        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la synchronisation globale:', error);
            return {
                totalUsers: 0,
                processedUsers: 0,
                totalAdded: 0,
                totalRemoved: 0,
                errors: [error.message]
            };
        }
    }

    /**
     * Ajoute une nouvelle r√©compense de r√¥le
     * @param {number} level - Le niveau requis
     * @param {string} roleId - L'ID du r√¥le √† attribuer
     * @param {boolean} removeOnLevelDown - Si le r√¥le doit √™tre retir√© si le niveau baisse
     * @returns {Promise<boolean>} - Succ√®s de l'ajout
     */
    static async addRoleReward(level, roleId, removeOnLevelDown = false) {
        try {
            const config = await xpDataManager.getLevelConfig();
            
            // V√©rifier si le tableau existe
            if (!Array.isArray(config.roleRewards)) {
                config.roleRewards = [];
            }
            
            // V√©rifier si la r√©compense existe d√©j√†
            const existingReward = config.roleRewards.find(r => r.level === level || r.roleId === roleId);
            if (existingReward) {
                console.warn(`[ROLE-REWARDS] ‚ö†Ô∏è R√©compense d√©j√† existante pour le niveau ${level} ou le r√¥le ${roleId}`);
                return false;
            }

            // Ajouter la nouvelle r√©compense
            config.roleRewards.push({
                level,
                roleId,
                removeOnLevelDown
            });

            // Trier par niveau
            config.roleRewards.sort((a, b) => a.level - b.level);

            await xpDataManager.saveLevelConfig(config);
            console.log(`[ROLE-REWARDS] ‚úÖ R√©compense ajout√©e: niveau ${level} -> r√¥le ${roleId}`);
            return true;

        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de l\'ajout de la r√©compense:', error);
            return false;
        }
    }

    /**
     * Supprime une r√©compense de r√¥le
     * @param {number} level - Le niveau de la r√©compense √† supprimer
     * @returns {Promise<boolean>} - Succ√®s de la suppression
     */
    static async removeRoleReward(level) {
        try {
            const config = await xpDataManager.getLevelConfig();
            
            const initialLength = config.roleRewards.length;
            config.roleRewards = config.roleRewards.filter(r => r.level !== level);
            
            if (config.roleRewards.length === initialLength) {
                console.warn(`[ROLE-REWARDS] ‚ö†Ô∏è Aucune r√©compense trouv√©e pour le niveau ${level}`);
                return false;
            }

            await xpDataManager.saveLevelConfig(config);
            console.log(`[ROLE-REWARDS] ‚úÖ R√©compense supprim√©e pour le niveau ${level}`);
            return true;

        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la suppression de la r√©compense:', error);
            return false;
        }
    }

    /**
     * R√©cup√®re toutes les r√©compenses configur√©es
     * @returns {Promise<Array>} - Liste des r√©compenses
     */
    static async getAllRewards() {
        try {
            const config = await xpDataManager.getLevelConfig();
            return config.roleRewards || [];
        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la r√©cup√©ration des r√©compenses:', error);
            return [];
        }
    }

    /**
     * R√©cup√®re les r√©compenses disponibles pour un niveau donn√©
     * @param {number} level - Le niveau √† v√©rifier
     * @returns {Promise<Array>} - Liste des r√©compenses disponibles
     */
    static async getRewardsForLevel(level) {
        try {
            const config = await xpDataManager.getLevelConfig();
            return config.roleRewards.filter(r => r.level <= level) || [];
        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la r√©cup√©ration des r√©compenses pour le niveau:', error);
            return [];
        }
    }

    /**
     * R√©cup√®re la prochaine r√©compense disponible pour un niveau donn√©
     * @param {number} currentLevel - Le niveau actuel
     * @returns {Promise<Object|null>} - La prochaine r√©compense ou null
     */
    static async getNextReward(currentLevel) {
        try {
            const config = await xpDataManager.getLevelConfig();
            const nextReward = config.roleRewards
                .filter(r => r.level > currentLevel)
                .sort((a, b) => a.level - b.level)[0];
            
            return nextReward || null;
        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la r√©cup√©ration de la prochaine r√©compense:', error);
            return null;
        }
    }

    /**
     * Valide qu'un r√¥le existe et peut √™tre g√©r√© par le bot
     * @param {Guild} guild - Le serveur Discord
     * @param {string} roleId - L'ID du r√¥le √† valider
     * @returns {Promise<Object>} - R√©sultat de la validation
     */
    static async validateRole(guild, roleId) {
        try {
            const role = guild.roles.cache.get(roleId);
            
            if (!role) {
                return {
                    valid: false,
                    error: 'R√¥le introuvable'
                };
            }

            const botMember = guild.members.me;
            if (!botMember) {
                return {
                    valid: false,
                    error: 'Impossible de r√©cup√©rer les informations du bot'
                };
            }

            // V√©rifier si le bot peut g√©rer ce r√¥le
            if (role.position >= botMember.roles.highest.position) {
                return {
                    valid: false,
                    error: 'Le r√¥le est trop √©lev√© dans la hi√©rarchie pour √™tre g√©r√© par le bot'
                };
            }

            // V√©rifier si le r√¥le est g√©rable
            if (!role.editable) {
                return {
                    valid: false,
                    error: 'Le r√¥le ne peut pas √™tre g√©r√© par le bot'
                };
            }

            return {
                valid: true,
                role: role
            };

        } catch (error) {
            console.error('[ROLE-REWARDS] ‚ùå Erreur lors de la validation du r√¥le:', error);
            return {
                valid: false,
                error: error.message
            };
        }
    }
}
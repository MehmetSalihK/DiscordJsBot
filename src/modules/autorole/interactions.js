import { 
  EmbedBuilder, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle,
  StringSelectMenuBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ChannelType,
  MessageFlags
} from 'discord.js';

import { 
  getGuildConfig, 
  toggleAutoRole, 
  addRole, 
  removeRole, 
  setLogChannel, 
  resetGuildConfig 
} from './storage.js';

import { validateRoleForAutoRole, getAutoRoleStats } from './core.js';
import { logConfig } from './logger.js';

/**
 * Cr√©e un embed d'erreur
 */
function createErrorEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(0xFF0000)
    .setTitle(`‚ùå ${title}`)
    .setDescription(description)
    .setTimestamp();
}

/**
 * Cr√©e un embed de succ√®s
 */
function createSuccessEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(0x00FF00)
    .setTitle(`‚úÖ ${title}`)
    .setDescription(description)
    .setTimestamp();
}

/**
 * Cr√©e un embed d'information
 */
function createInfoEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(0x0099FF)
    .setTitle(`‚ÑπÔ∏è ${title}`)
    .setDescription(description)
    .setTimestamp();
}

/**
 * Cr√©e l'embed principal du panneau AutoRole
 */
export function createPanelEmbed(guild, config, stats) {
  const embed = new EmbedBuilder()
    .setColor(config.enabled ? 0x00FF00 : 0xFF0000)
    .setTitle('ü§ñ Panneau de configuration AutoRole')
    .setDescription(`Configuration AutoRole pour **${guild.name}**\n\nüìä **${stats.totalRoles} r√¥le(s) configur√©(s)**`)
    .addFields(
      {
        name: 'üìä Statut du syst√®me',
        value: config.enabled ? '‚úÖ **Activ√©**' : '‚ùå **D√©sactiv√©**',
        inline: true
      },
      {
        name: 'üé≠ R√¥les valides',
        value: `${stats.validRoles}/${stats.totalRoles}`,
        inline: true
      },
      {
        name: 'üìù Canal de logs',
        value: config.logChannel ? `<#${config.logChannel}>` : '‚ùå Non configur√©',
        inline: true
      }
    )
    .setFooter({ text: 'Utilisez les boutons ci-dessous pour configurer l\'AutoRole' })
    .setTimestamp();

  return embed;
}

/**
 * Cr√©e les composants (boutons) du panneau AutoRole
 */
export function createPanelComponents() {
  const row1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('autorole_toggle')
        .setLabel('Activer/D√©sactiver')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üîÑ'),
      new ButtonBuilder()
        .setCustomId('autorole_add_role')
        .setLabel('Ajouter')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚ûï'),
      new ButtonBuilder()
        .setCustomId('autorole_remove_role')
        .setLabel('Supprimer')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('‚ûñ'),
      new ButtonBuilder()
        .setCustomId('autorole_list')
        .setLabel('Voir la liste')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìã')
    );

  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('autorole_config_logs')
        .setLabel('Configurer les logs')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìù'),
      new ButtonBuilder()
        .setCustomId('autorole_reset')
        .setLabel('Reset')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üóëÔ∏è'),
      new ButtonBuilder()
        .setCustomId('autorole_refresh')
        .setLabel('Refresh')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üîÑ'),
      new ButtonBuilder()
        .setCustomId('autorole_close')
        .setLabel('Fermer le panneau')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚ùå')
    );

  return [row1, row2];
}

/**
 * Gestionnaire principal des interactions AutoRole
 */
export async function handleAutoRoleInteraction(interaction) {
  if (!interaction.member.permissions.has('Administrator')) {
    const embed = createErrorEmbed(
      '‚ùå Permissions insuffisantes',
      'Vous devez √™tre administrateur pour utiliser cette fonctionnalit√©.'
    );
    
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    return;
  }

  try {
    const customId = interaction.customId;

    switch (customId) {
      case 'autorole_toggle':
        await handleToggleInteraction(interaction);
        break;
      case 'autorole_add_role':
        await handleAddRoleInteraction(interaction);
        break;
      case 'autorole_remove_role':
        await handleRemoveRoleInteraction(interaction);
        break;
      case 'autorole_config_logs':
        await handleConfigLogsInteraction(interaction);
        break;
      case 'autorole_reset':
        await handleResetInteraction(interaction);
        break;
      case 'autorole_reset_confirm':
        await handleResetConfirmInteraction(interaction);
        break;
      case 'autorole_reset_cancel':
        await handleResetCancelInteraction(interaction);
        break;
      case 'autorole_role_select':
        await handleRoleSelectInteraction(interaction);
        break;
      case 'autorole_role_remove_select':
        await handleRoleRemoveSelectInteraction(interaction);
        break;
      case 'autorole_channel_select':
        await handleChannelSelectInteraction(interaction);
        break;
      case 'autorole_list':
        await handleListInteraction(interaction);
        break;
      case 'autorole_refresh':
        await handleRefreshInteraction(interaction);
        break;
      case 'autorole_close':
        await handleCloseInteraction(interaction);
        break;
      default:
        if (customId.startsWith('autorole_add_next_')) {
          const page = parseInt(customId.split('_').pop());
          await handleAddRolePaginationNext(interaction, page);
        } else if (customId.startsWith('autorole_add_prev_')) {
          const page = parseInt(customId.split('_').pop());
          await handleAddRolePaginationPrev(interaction, page);
        } else if (customId.startsWith('autorole_')) {
          await interaction.reply({
            content: '‚ùå Interaction non reconnue.',
            flags: MessageFlags.Ephemeral
          });
        }
    }
  } catch (error) {
    console.error('Erreur dans l\'interaction AutoRole:', error);
    
    const embed = createErrorEmbed(
      'Erreur syst√®me',
      'Une erreur inattendue s\'est produite.'
    );

    if (interaction.replied || interaction.deferred) {
      await interaction.followUp({ embeds: [embed], flags: MessageFlags.Ephemeral });
    } else {
      await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    }
  }
}

/**
 * G√®re l'interaction de toggle (activer/d√©sactiver)
 */
async function handleToggleInteraction(interaction) {
  await interaction.deferUpdate();
  
  const config = getGuildConfig(interaction.guild.id);
  const newState = !config.enabled;

  const success = toggleAutoRole(interaction.guild.id, newState);

  if (success) {
    const action = newState ? 'activ√©' : 'd√©sactiv√©';
    const emoji = newState ? '‚úÖ' : '‚ùå';

    await logConfig(
      interaction.guild,
      interaction.user,
      `AutoRole ${action}`,
      `Le syst√®me AutoRole a √©t√© ${action} via le panneau de contr√¥le.`
    );

    // Mettre √† jour le panneau
    await updatePanel(interaction);

    const embed = createSuccessEmbed(
      `${emoji} AutoRole ${action}`,
      `Le syst√®me AutoRole a √©t√© ${action} avec succ√®s.`
    );

    await interaction.followUp({ embeds: [embed], flags: MessageFlags.Ephemeral });
  } else {
    const embed = createErrorEmbed(
      'Erreur',
      'Impossible de modifier l\'√©tat du syst√®me AutoRole.'
    );

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }
}

/**
 * G√®re la pagination pour l'ajout de r√¥les (page suivante)
 */
async function handleAddRolePaginationNext(interaction, currentPage) {
  try {
    const config = getGuildConfig(interaction.guild.id);
    const currentRoles = config.roles || [];
    const newPage = currentPage + 1;

    // Filtrer les r√¥les disponibles
    const availableRoles = interaction.guild.roles.cache
      .filter(role => 
        !role.managed && 
        role.id !== interaction.guild.id && 
        !currentRoles.includes(role.id) && 
        role.name !== '@everyone'
      )
      .sort((a, b) => b.position - a.position);

    const rolesPerPage = 25;
    const totalPages = Math.ceil(availableRoles.size / rolesPerPage);
    const startIndex = newPage * rolesPerPage;
    const endIndex = startIndex + rolesPerPage;
    
    const rolesArray = Array.from(availableRoles.values());
    const rolesToShow = rolesArray.slice(startIndex, endIndex);

    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('autorole_role_select')
      .setPlaceholder('S√©lectionnez un r√¥le √† ajouter')
      .addOptions(
        rolesToShow.map(role => ({
          label: role.name.length > 100 ? role.name.substring(0, 97) + '...' : role.name,
          value: role.id,
          description: `Position: ${role.position} | Membres: ${role.members.size}`,
          emoji: 'üé≠'
        }))
      );

    const components = [new ActionRowBuilder().addComponents(selectMenu)];

    // Boutons de pagination
    if (totalPages > 1) {
      const paginationButtons = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`autorole_add_prev_${newPage}`)
          .setLabel('‚óÄÔ∏è Pr√©c√©dent')
          .setStyle(ButtonStyle.Secondary)
          .setDisabled(newPage === 0),
        new ButtonBuilder()
          .setCustomId(`autorole_add_next_${newPage}`)
          .setLabel('Suivant ‚ñ∂Ô∏è')
          .setStyle(ButtonStyle.Secondary)
          .setDisabled(newPage === totalPages - 1)
      );
      components.push(paginationButtons);
    }

    let description = `S√©lectionnez le r√¥le que vous souhaitez ajouter √† l\'AutoRole.\n\n`;
    description += `**R√¥les disponibles :** ${availableRoles.size}\n`;
    description += `**R√¥les d√©j√† configur√©s :** ${currentRoles.length}`;
    
    if (totalPages > 1) {
      description += `\n\nüìÑ **Page ${newPage + 1}/${totalPages}** - Utilisez les boutons pour naviguer`;
    }

    const embed = new EmbedBuilder()
      .setColor(0x0099FF)
      .setTitle('‚ûï Ajouter un r√¥le')
      .setDescription(description)
      .setFooter({ 
        text: totalPages > 1 
          ? `Page ${newPage + 1}/${totalPages} - ${rolesToShow.length} r√¥les sur cette page`
          : `${rolesToShow.length} r√¥les disponibles`
      });

    await interaction.update({ embeds: [embed], components });
  } catch (error) {
    console.error('Erreur dans handleAddRolePaginationNext:', error);
    
    const embed = createErrorEmbed(
      'Erreur',
      'Une erreur s\'est produite lors de la navigation.'
    );
    
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }
}

/**
 * G√®re la pagination pour l'ajout de r√¥les (page pr√©c√©dente)
 */
async function handleAddRolePaginationPrev(interaction, currentPage) {
  try {
    const config = getGuildConfig(interaction.guild.id);
    const currentRoles = config.roles || [];
    const newPage = currentPage - 1;

    // Filtrer les r√¥les disponibles
    const availableRoles = interaction.guild.roles.cache
      .filter(role => 
        !role.managed && 
        role.id !== interaction.guild.id && 
        !currentRoles.includes(role.id) && 
        role.name !== '@everyone'
      )
      .sort((a, b) => b.position - a.position);

    const rolesPerPage = 25;
    const totalPages = Math.ceil(availableRoles.size / rolesPerPage);
    const startIndex = newPage * rolesPerPage;
    const endIndex = startIndex + rolesPerPage;
    
    const rolesArray = Array.from(availableRoles.values());
    const rolesToShow = rolesArray.slice(startIndex, endIndex);

    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('autorole_role_select')
      .setPlaceholder('S√©lectionnez un r√¥le √† ajouter')
      .addOptions(
        rolesToShow.map(role => ({
          label: role.name.length > 100 ? role.name.substring(0, 97) + '...' : role.name,
          value: role.id,
          description: `Position: ${role.position} | Membres: ${role.members.size}`,
          emoji: 'üé≠'
        }))
      );

    const components = [new ActionRowBuilder().addComponents(selectMenu)];

    // Boutons de pagination
    if (totalPages > 1) {
      const paginationButtons = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`autorole_add_prev_${newPage}`)
          .setLabel('‚óÄÔ∏è Pr√©c√©dent')
          .setStyle(ButtonStyle.Secondary)
          .setDisabled(newPage === 0),
        new ButtonBuilder()
          .setCustomId(`autorole_add_next_${newPage}`)
          .setLabel('Suivant ‚ñ∂Ô∏è')
          .setStyle(ButtonStyle.Secondary)
          .setDisabled(newPage === totalPages - 1)
      );
      components.push(paginationButtons);
    }

    let description = `S√©lectionnez le r√¥le que vous souhaitez ajouter √† l\'AutoRole.\n\n`;
    description += `**R√¥les disponibles :** ${availableRoles.size}\n`;
    description += `**R√¥les d√©j√† configur√©s :** ${currentRoles.length}`;
    
    if (totalPages > 1) {
      description += `\n\nüìÑ **Page ${newPage + 1}/${totalPages}** - Utilisez les boutons pour naviguer`;
    }

    const embed = new EmbedBuilder()
      .setColor(0x0099FF)
      .setTitle('‚ûï Ajouter un r√¥le')
      .setDescription(description)
      .setFooter({ 
        text: totalPages > 1 
          ? `Page ${newPage + 1}/${totalPages} - ${rolesToShow.length} r√¥les sur cette page`
          : `${rolesToShow.length} r√¥les disponibles`
      });

    await interaction.update({ embeds: [embed], components });
  } catch (error) {
    console.error('Erreur dans handleAddRolePaginationPrev:', error);
    
    const embed = createErrorEmbed(
      'Erreur',
      'Une erreur s\'est produite lors de la navigation.'
    );
    
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }
}

/**
 * G√®re l'interaction d'ajout de r√¥le
 */
async function handleAddRoleInteraction(interaction) {
  const config = getGuildConfig(interaction.guild.id);
  const currentRoles = config.roles || [];

  // Filtrer les r√¥les : exclure les r√¥les g√©r√©s, @everyone, et ceux d√©j√† dans AutoRole
  const availableRoles = interaction.guild.roles.cache
    .filter(role => 
      !role.managed && // Pas de r√¥les de bot
      role.id !== interaction.guild.id && // Pas @everyone
      !currentRoles.includes(role.id) && // Pas d√©j√† dans AutoRole
      role.name !== '@everyone' // Double v√©rification
    )
    .sort((a, b) => b.position - a.position);

  if (availableRoles.size === 0) {
    const embed = createErrorEmbed(
      'Aucun r√¥le disponible',
      'Aucun r√¥le valide n\'est disponible pour l\'AutoRole.\n\n' +
      '**Raisons possibles :**\n' +
      '‚Ä¢ Tous les r√¥les sont d√©j√† configur√©s\n' +
      '‚Ä¢ Seuls les r√¥les de bot sont disponibles\n' +
      '‚Ä¢ Aucun r√¥le n\'existe sur ce serveur'
    );

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    return;
  }

  // Pagination : 25 r√¥les par page (limite Discord)
  const rolesPerPage = 25;
  const page = 0; // Premi√®re page par d√©faut
  const totalPages = Math.ceil(availableRoles.size / rolesPerPage);
  const startIndex = page * rolesPerPage;
  const endIndex = startIndex + rolesPerPage;
  
  const rolesArray = Array.from(availableRoles.values());
  const rolesToShow = rolesArray.slice(startIndex, endIndex);

  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('autorole_role_select')
    .setPlaceholder('S√©lectionnez un r√¥le √† ajouter')
    .addOptions(
      rolesToShow.map(role => ({
        label: role.name.length > 100 ? role.name.substring(0, 97) + '...' : role.name,
        value: role.id,
        description: `Position: ${role.position} | Membres: ${role.members.size}`,
        emoji: 'üé≠'
      }))
    );

  const components = [new ActionRowBuilder().addComponents(selectMenu)];

  // Ajouter les boutons de pagination si n√©cessaire
  if (totalPages > 1) {
    const paginationButtons = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`autorole_add_prev_${page}`)
        .setLabel('‚óÄÔ∏è Pr√©c√©dent')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === 0),
      new ButtonBuilder()
        .setCustomId(`autorole_add_next_${page}`)
        .setLabel('Suivant ‚ñ∂Ô∏è')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(page === totalPages - 1)
    );
    components.push(paginationButtons);
  }

  let description = `S√©lectionnez le r√¥le que vous souhaitez ajouter √† l\'AutoRole.\n\n`;
  description += `**R√¥les disponibles :** ${availableRoles.size}\n`;
  description += `**R√¥les d√©j√† configur√©s :** ${currentRoles.length}`;
  
  if (totalPages > 1) {
    description += `\n\nüìÑ **Page ${page + 1}/${totalPages}** - Utilisez les boutons pour naviguer`;
  }

  const embed = new EmbedBuilder()
    .setColor(0x0099FF)
    .setTitle('‚ûï Ajouter un r√¥le')
    .setDescription(description)
    .setFooter({ 
      text: totalPages > 1 
        ? `Page ${page + 1}/${totalPages} - ${rolesToShow.length} r√¥les sur cette page`
        : `${rolesToShow.length} r√¥les disponibles`
    });

  await interaction.reply({ embeds: [embed], components, flags: MessageFlags.Ephemeral });
}

/**
 * G√®re l'interaction de suppression de r√¥le
 */
async function handleRemoveRoleInteraction(interaction) {
  const config = getGuildConfig(interaction.guild.id);

  if (config.roles.length === 0) {
    const embed = createWarningEmbed(
      'Aucun r√¥le configur√©',
      'Aucun r√¥le n\'est actuellement configur√© dans l\'AutoRole.'
    );

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    return;
  }

  const roleOptions = config.roles
    .map(roleId => {
      const role = interaction.guild.roles.cache.get(roleId);
      return role ? {
        label: role.name,
        value: role.id,
        description: `Position: ${role.position}`,
        emoji: 'üé≠'
      } : {
        label: `R√¥le supprim√© (${roleId})`,
        value: roleId,
        description: 'Ce r√¥le n\'existe plus',
        emoji: '‚ùå'
      };
    })
    .slice(0, 25);

  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('autorole_role_remove_select')
    .setPlaceholder('S√©lectionnez un r√¥le √† supprimer')
    .addOptions(roleOptions);

  const row = new ActionRowBuilder().addComponents(selectMenu);

  const embed = new EmbedBuilder()
    .setColor(0xFF6B6B)
    .setTitle('‚ûñ Supprimer un r√¥le')
    .setDescription('S√©lectionnez le r√¥le que vous souhaitez supprimer de l\'AutoRole.')
    .setFooter({ text: 'Les r√¥les supprim√©s du serveur sont marqu√©s en rouge' });

  await interaction.reply({ embeds: [embed], components: [row], flags: MessageFlags.Ephemeral });
}

/**
 * G√®re l'interaction de configuration des logs
 */
async function handleConfigLogsInteraction(interaction) {
  const channels = interaction.guild.channels.cache
    .filter(channel => channel.type === ChannelType.GuildText && channel.permissionsFor(interaction.guild.members.me).has(['SendMessages', 'EmbedLinks']))
    .sort((a, b) => a.name.localeCompare(b.name))
    .first(24);

  const options = [
    {
      label: 'D√©sactiver les logs',
      value: 'disable',
      description: 'D√©sactive compl√®tement les logs AutoRole',
      emoji: '‚ùå'
    },
    ...channels.map(channel => ({
      label: `#${channel.name}`,
      value: channel.id,
      description: `Canal textuel - ${channel.topic || 'Pas de description'}`.substring(0, 100),
      emoji: 'üìù'
    }))
  ];

  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('autorole_channel_select')
    .setPlaceholder('S√©lectionnez un canal pour les logs')
    .addOptions(options);

  const row = new ActionRowBuilder().addComponents(selectMenu);

  const embed = new EmbedBuilder()
    .setColor(0x0099FF)
    .setTitle('üìù Configuration des logs')
    .setDescription('S√©lectionnez le canal o√π les logs AutoRole seront envoy√©s, ou d√©sactivez-les.')
    .setFooter({ text: 'Seuls les canaux o√π le bot peut √©crire sont affich√©s' });

  await interaction.reply({ embeds: [embed], components: [row], flags: MessageFlags.Ephemeral });
}

/**
 * G√®re l'interaction de r√©initialisation
 */
async function handleResetInteraction(interaction) {
  const embed = new EmbedBuilder()
    .setColor(0xFF6B6B)
    .setTitle('üóëÔ∏è Confirmation de r√©initialisation')
    .setDescription('‚ö†Ô∏è **Attention !** Cette action va supprimer d√©finitivement toute la configuration AutoRole de ce serveur.')
    .addFields({
      name: 'üìã Configuration actuelle',
      value: await getConfigSummary(interaction.guild),
      inline: false
    })
    .setFooter({ text: 'Cette action est irr√©versible !' });

  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('autorole_reset_confirm')
        .setLabel('Confirmer la r√©initialisation')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üóëÔ∏è'),
      new ButtonBuilder()
        .setCustomId('autorole_reset_cancel')
        .setLabel('Annuler')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚ùå')
    );

  await interaction.reply({ embeds: [embed], components: [row], flags: MessageFlags.Ephemeral });
}

/**
 * G√®re la confirmation de r√©initialisation
 */
async function handleResetConfirmInteraction(interaction) {
  await interaction.deferUpdate();
  
  const success = resetGuildConfig(interaction.guild.id);

  if (success) {
    await logConfig(
      interaction.guild,
      interaction.user,
      'R√©initialisation compl√®te',
      'La configuration AutoRole a √©t√© compl√®tement r√©initialis√©e.'
    );

    // Mettre √† jour le panneau principal
    await updatePanel(interaction);

    const embed = createSuccessEmbed(
      'üóëÔ∏è Configuration r√©initialis√©e',
      'La configuration AutoRole a √©t√© compl√®tement r√©initialis√©e avec succ√®s.'
    );

    await interaction.editReply({ embeds: [embed], components: [] });
  } else {
    const embed = createErrorEmbed(
      'Erreur',
      'Impossible de r√©initialiser la configuration AutoRole.'
    );

    await interaction.editReply({ embeds: [embed], components: [] });
  }
}

/**
 * G√®re l'annulation de r√©initialisation
 */
async function handleResetCancelInteraction(interaction) {
  const embed = new EmbedBuilder()
    .setColor(0x00FF00)
    .setTitle('‚úÖ R√©initialisation annul√©e')
    .setDescription('La r√©initialisation de la configuration AutoRole a √©t√© annul√©e.')
    .setTimestamp();

  await interaction.update({ embeds: [embed], components: [] });
}

/**
 * G√®re la s√©lection de r√¥le pour ajout
 */
async function handleRoleSelectInteraction(interaction) {
  const roleId = interaction.values[0];
  const role = interaction.guild.roles.cache.get(roleId);

  if (!role) {
    const embed = createErrorEmbed(
      'R√¥le introuvable',
      'Le r√¥le s√©lectionn√© n\'existe plus.'
    );

    await interaction.update({ embeds: [embed], components: [] });
    return;
  }

  const validation = validateRoleForAutoRole(interaction.guild, role);

  if (!validation.valid) {
    const embed = createErrorEmbed('R√¥le invalide', validation.reason);
    await interaction.update({ embeds: [embed], components: [] });
    return;
  }

  const success = addRole(interaction.guild.id, role.id);

  if (success) {
    await logConfig(
      interaction.guild,
      interaction.user,
      'Ajout de r√¥le',
      `Le r√¥le ${role.name} (${role.id}) a √©t√© ajout√© √† l'AutoRole via le panneau.`
    );

    // Mettre √† jour le panneau principal
    await updatePanel(interaction);

    const embed = createSuccessEmbed(
      '‚úÖ R√¥le ajout√©',
      `Le r√¥le ${role} a √©t√© ajout√© √† l'AutoRole avec succ√®s.`
    );

    await interaction.update({ embeds: [embed], components: [] });
  } else {
    const embed = createWarningEmbed(
      '‚ö†Ô∏è R√¥le d√©j√† pr√©sent',
      `Le r√¥le ${role} est d√©j√† dans la liste AutoRole.`
    );

    await interaction.update({ embeds: [embed], components: [] });
  }
}

/**
 * G√®re la s√©lection de r√¥le pour suppression
 */
async function handleRoleRemoveSelectInteraction(interaction) {
  const roleId = interaction.values[0];
  const role = interaction.guild.roles.cache.get(roleId);
  const roleName = role ? role.name : `R√¥le supprim√© (${roleId})`;

  const success = removeRole(interaction.guild.id, roleId);

  if (success) {
    await logConfig(
      interaction.guild,
      interaction.user,
      'Suppression de r√¥le',
      `Le r√¥le ${roleName} (${roleId}) a √©t√© supprim√© de l'AutoRole via le panneau.`
    );

    // Mettre √† jour le panneau principal
    await updatePanel(interaction);

    const embed = createSuccessEmbed(
      '‚úÖ R√¥le supprim√©',
      `Le r√¥le **${roleName}** a √©t√© supprim√© de l'AutoRole avec succ√®s.`
    );

    await interaction.update({ embeds: [embed], components: [] });
  } else {
    const embed = createWarningEmbed(
      '‚ö†Ô∏è R√¥le non trouv√©',
      `Le r√¥le **${roleName}** n'√©tait pas dans la liste AutoRole.`
    );

    await interaction.update({ embeds: [embed], components: [] });
  }
}

/**
 * G√®re la s√©lection de canal pour les logs
 */
async function handleChannelSelectInteraction(interaction) {
  const channelId = interaction.values[0] === 'disable' ? null : interaction.values[0];
  const channel = channelId ? interaction.guild.channels.cache.get(channelId) : null;

  const success = setLogChannel(interaction.guild.id, channelId);

  if (success) {
    const action = channel ? 'configur√©' : 'd√©sactiv√©';
    const details = channel 
      ? `Le canal ${channel.name} (${channel.id}) a √©t√© d√©fini comme canal de logs AutoRole via le panneau.`
      : 'Les logs AutoRole ont √©t√© d√©sactiv√©s via le panneau.';

    await logConfig(
      interaction.guild,
      interaction.user,
      'Configuration des logs',
      details
    );

    // Mettre √† jour le panneau principal
    await updatePanel(interaction);

    const embed = createSuccessEmbed(
      `‚úÖ Logs ${action}`,
      channel 
        ? `Le canal ${channel} a √©t√© configur√© pour les logs AutoRole.`
        : 'Les logs AutoRole ont √©t√© d√©sactiv√©s.'
    );

    await interaction.update({ embeds: [embed], components: [] });
  } else {
    const embed = createErrorEmbed(
      'Erreur',
      'Impossible de configurer le canal de logs.'
    );

    await interaction.update({ embeds: [embed], components: [] });
  }
}

/**
 * Met √† jour le panneau principal
 */
async function updatePanel(interaction) {
  try {
    const config = getGuildConfig(interaction.guild.id);
    const stats = getAutoRoleStats(interaction.guild);

    const embed = createPanelEmbed(interaction.guild, config, stats);
    const components = createPanelComponents();

    // Trouver le message original du panneau et le mettre √† jour
    const originalMessage = interaction.message;
    if (originalMessage && !originalMessage.ephemeral) {
      try {
        await originalMessage.edit({ embeds: [embed], components });
      } catch (editError) {
        // Si le message ne peut pas √™tre modifi√© (supprim√©, permissions, etc.)
        // On ignore silencieusement l'erreur car ce n'est pas critique
        console.log('Impossible de mettre √† jour le panneau principal (message supprim√© ou inaccessible)');
      }
    }
  } catch (error) {
    console.error('Erreur lors de la mise √† jour du panneau:', error);
  }
}

/**
 * G√®re l'affichage de la liste des r√¥les AutoRole
 */
async function handleListInteraction(interaction) {
  try {
    const config = getGuildConfig(interaction.guild.id);
    
    if (!config.roles || config.roles.length === 0) {
      const embed = createInfoEmbed(
        'Liste des r√¥les AutoRole',
        'Aucun r√¥le n\'est configur√© pour l\'AutoRole sur ce serveur.'
      );
      
      await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
      return;
    }

    // R√©cup√©rer les r√¥les du serveur et v√©rifier lesquels existent encore
    const validRoles = [];
    const invalidRoles = [];

    for (const roleId of config.roles) {
      const role = interaction.guild.roles.cache.get(roleId);
      if (role) {
        validRoles.push(`‚Ä¢ ${role.name} (${role.id})`);
      } else {
        invalidRoles.push(`‚Ä¢ R√¥le supprim√© (${roleId})`);
      }
    }

    let description = '';
    
    if (validRoles.length > 0) {
      description += `**R√¥les actifs (${validRoles.length}):**\n${validRoles.join('\n')}`;
    }
    
    if (invalidRoles.length > 0) {
      if (description) description += '\n\n';
      description += `**R√¥les invalides (${invalidRoles.length}):**\n${invalidRoles.join('\n')}`;
    }

    const embed = createInfoEmbed(
      'Liste des r√¥les AutoRole',
      description
    );

    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  } catch (error) {
    console.error('Erreur dans handleListInteraction:', error);
    
    const embed = createErrorEmbed(
      'Erreur',
      'Une erreur s\'est produite lors de l\'affichage de la liste des r√¥les.'
    );
    
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }
}

/**
 * G√®re le rafra√Æchissement du panneau
 */
async function handleRefreshInteraction(interaction) {
  try {
    await updatePanel(interaction);
    
    const embed = createSuccessEmbed(
      'Panneau rafra√Æchi',
      'Le panneau AutoRole a √©t√© mis √† jour avec les derni√®res informations.'
    );
    
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  } catch (error) {
    console.error('Erreur dans handleRefreshInteraction:', error);
    
    const embed = createErrorEmbed(
      'Erreur',
      'Une erreur s\'est produite lors du rafra√Æchissement du panneau.'
    );
    
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }
}

/**
 * G√®re la fermeture du panneau
 */
async function handleCloseInteraction(interaction) {
  try {
    const embed = createInfoEmbed(
      'Panneau ferm√©',
      'Le panneau AutoRole a √©t√© ferm√©. Utilisez `/autorole` pour le rouvrir.'
    );
    
    // Supprimer les composants du message original
    const originalMessage = interaction.message;
    if (originalMessage && !originalMessage.ephemeral) {
      try {
        await originalMessage.edit({ embeds: [embed], components: [] });
      } catch (editError) {
        console.log('Impossible de fermer le panneau (message supprim√© ou inaccessible)');
      }
    }
    
    await interaction.reply({ 
      content: '‚úÖ Panneau ferm√© avec succ√®s.', 
      flags: MessageFlags.Ephemeral 
    });
  } catch (error) {
    console.error('Erreur dans handleCloseInteraction:', error);
    
    const embed = createErrorEmbed(
      'Erreur',
      'Une erreur s\'est produite lors de la fermeture du panneau.'
    );
    
    await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
  }
}



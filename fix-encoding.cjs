const fs = require('fs');

console.log('üîß Correction des caract√®res d\'encodage corrompus...');

const filePath = 'music/queueManager.js';

try {
    // Lire le fichier
    if (!fs.existsSync(filePath)) {
        console.error('‚ùå Fichier non trouv√©:', filePath);
        process.exit(1);
    }

    let content = fs.readFileSync(filePath, 'utf8');
    let corrections = 0;
    
    console.log('üìÑ Fichier lu:', filePath);
    console.log('üìä Taille du fichier:', content.length, 'caract√®res');
    
    // Remplacements directs des patterns les plus courants
    const replacements = [
        // Checkmark corrompu
        { from: /√¢≈ì‚Ä¶/g, to: '‚úÖ', name: 'checkmark' },
        // Cross mark corrompu  
        { from: /√¢≈í/g, to: '‚ùå', name: 'cross' },
        // Warning corrompu
        { from: /√¢≈° √Ø¬∏/g, to: '‚ö†Ô∏è', name: 'warning' },
        // Rocket corrompu
        { from: /√∞≈∏≈°‚Ç¨/g, to: 'üöÄ', name: 'rocket' },
        // Wrench corrompu
        { from: /√∞≈∏"¬ß/g, to: 'üîß', name: 'wrench' },
        // Key corrompu
        { from: /√∞≈∏"'/g, to: 'üîë', name: 'key' },
        // Play button corrompu
        { from: /√¢‚Äì¬∂√Ø¬∏/g, to: '‚ñ∂Ô∏è', name: 'play' },
        // Stop button corrompu
        { from: /√¢¬π√Ø¬∏/g, to: '‚èπÔ∏è', name: 'stop' },
        // Music note corrompu
        { from: /√∞≈∏≈Ω¬µ/g, to: 'üéµ', name: 'music' },
        // User corrompu
        { from: /√∞≈∏'¬§/g, to: 'üë§', name: 'user' },
        // House corrompu
        { from: /√∞≈∏ /g, to: 'üè†', name: 'house' },
        // Speaker corrompu
        { from: /√∞≈∏"≈†/g, to: 'üîä', name: 'speaker' },
        // Search corrompu
        { from: /√∞≈∏"/g, to: 'üîç', name: 'search' },
        // Shuffle corrompu
        { from: /√∞≈∏"‚Ç¨/g, to: 'üîÄ', name: 'shuffle' }
    ];
    
    let totalErrors = 0;
    
    // Compter les erreurs avant correction
    for (const replacement of replacements) {
        const matches = content.match(replacement.from);
        if (matches) {
            totalErrors += matches.length;
        }
    }
    
    console.log('üîç Erreurs d\'encodage d√©tect√©es:', totalErrors);
    
    if (totalErrors === 0) {
        console.log('‚úÖ Aucune erreur d\'encodage trouv√©e dans le fichier');
        process.exit(0);
    }
    
    // Appliquer les corrections
    for (const replacement of replacements) {
        const matches = content.match(replacement.from);
        if (matches) {
            content = content.replace(replacement.from, replacement.to);
            corrections += matches.length;
            console.log(`üîÑ Corrig√© ${replacement.name}: ${matches.length} occurrences`);
        }
    }
    
    if (corrections > 0) {
        // Sauvegarder le fichier corrig√©
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ Fichier corrig√© avec succ√®s: ${corrections} corrections appliqu√©es`);
        console.log('üìÅ Fichier sauvegard√©:', filePath);
    } else {
        console.log('‚ÑπÔ∏è Aucune correction n√©cessaire');
    }
    
} catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error.message);
    process.exit(1);
}
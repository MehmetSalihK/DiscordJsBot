import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, MessageFlags } from 'discord.js';
import messageXPHandler from '../../../src/utils/messageXpHandler.js';
import voiceXPHandler from '../../../src/utils/voiceXpHandler.js';
import XPCalculator from '../../../src/utils/xpCalculator.js';

export default {
    category: 'utilisateur',
    data: new SlashCommandBuilder()
        .setName('xp')
        .setDescription('üéØ Commandes de gestion du syst√®me XP')
        .addSubcommand(subcommand =>
            subcommand
                .setName('profil')
                .setDescription('üìä Afficher le profil XP d\'un utilisateur')
                .addUserOption(option =>
                    option
                        .setName('utilisateur')
                        .setDescription('L\'utilisateur dont vous voulez voir le profil')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('classement')
                .setDescription('üèÜ Afficher le classement XP du serveur')
                .addStringOption(option =>
                    option
                        .setName('type')
                        .setDescription('Type de classement √† afficher')
                        .setRequired(false)
                        .addChoices(
                            { name: 'üí¨ Messages', value: 'message' },
                            { name: 'üé§ Vocal', value: 'voice' },
                            { name: 'üåü Global', value: 'global' }
                        )
                )
        ),

    async execute(interaction) {
        console.log('[XP-SLASH] üîç D√©but ex√©cution commande XP slash');

        try {
            const subcommand = interaction.options.getSubcommand();
            console.log('[XP-SLASH] üîç Sous-commande:', subcommand);

            switch (subcommand) {
                case 'profil':
                    await handleProfileCommand(interaction);
                    break;
                case 'classement':
                    await handleLeaderboardCommand(interaction);
                    break;
                default:
                    await interaction.reply({
                        content: '‚ùå Sous-commande non reconnue.',
                        flags: MessageFlags.Ephemeral
                    });
            }
        } catch (error) {
            console.error('[XP-SLASH] ‚ùå Erreur dans la commande XP:', error);

            const errorMessage = {
                content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande XP.',
                flags: MessageFlags.Ephemeral
            };

            if (interaction.replied || interaction.deferred) {
                await interaction.followUp(errorMessage);
            } else {
                await interaction.reply(errorMessage);
            }
        }
    }
};

// Fonction pour g√©rer le profil
async function handleProfileCommand(interaction) {
    console.log('[XP-SLASH] üîç D√©but handleProfileCommand');

    try {
        await interaction.deferReply();

        const targetUser = interaction.options.getUser('utilisateur') || interaction.user;
        console.log('[XP-SLASH] üîç Target user:', targetUser.tag);

        const member = await interaction.guild.members.fetch(targetUser.id);

        // R√©cup√©rer les statistiques r√©elles
        const messageStats = await messageXPHandler.getUserStats(interaction.guild.id, targetUser.id);
        const voiceStats = await voiceXPHandler.getUserVoiceStats(interaction.guild.id, targetUser.id);

        // Calculer l'XP total et le niveau global
        const totalXp = messageStats.totalXp + voiceStats.totalXp;
        const globalLevelInfo = await XPCalculator.getUserLevelInfo(totalXp);

        // Cr√©er l'embed du profil
        const embed = new EmbedBuilder()
            .setColor(0x3498db)
            .setTitle(`üìä Profil XP de ${member.displayName}`)
            .setThumbnail(targetUser.displayAvatarURL({ dynamic: true, size: 256 }))
            .addFields([
                {
                    name: 'üåü **Niveau Global**',
                    value: `\`\`\`yaml\nNiveau: ${globalLevelInfo.level}\nXP Total: ${XPCalculator.formatXP(totalXp)}\nProgression: ${Math.round(globalLevelInfo.progress)}%\`\`\``,
                    inline: true
                },
                {
                    name: 'üí¨ **XP Messages**',
                    value: `\`\`\`fix\n${XPCalculator.formatXP(messageStats.totalXp)} XP\`\`\``,
                    inline: true
                },
                {
                    name: 'üé§ **XP Vocal**',
                    value: `\`\`\`css\n${XPCalculator.formatXP(voiceStats.totalXp)} XP\n${Math.round(voiceStats.totalMinutes)} minutes\`\`\``,
                    inline: true
                }
            ])
            .setFooter({
                text: `Syst√®me XP ‚Ä¢ ${interaction.guild.name}`,
                iconURL: interaction.guild.iconURL({ dynamic: true })
            })
            .setTimestamp();

        // Ajouter la barre de progression
        try {
            const progressBar = XPCalculator.generateProgressBar(globalLevelInfo.progress, 20);
            embed.addFields({
                name: 'üìà Progression vers le niveau suivant',
                value: `\`${progressBar}\`\n${XPCalculator.formatXP(globalLevelInfo.xpInCurrentLevel)} / ${XPCalculator.formatXP(globalLevelInfo.xpToNextLevel)} XP`,
                inline: false
            });
        } catch (progressError) {
            console.error('[XP-SLASH] ‚ùå Erreur barre de progression:', progressError);
        }

        await interaction.editReply({ embeds: [embed] });
        console.log('[XP-SLASH] ‚úÖ Profil affich√© avec succ√®s');

    } catch (error) {
        console.error('[XP-SLASH] ‚ùå Erreur dans handleProfileCommand:', error);

        const errorMessage = {
            content: '‚ùå Une erreur est survenue lors de la r√©cup√©ration du profil XP.',
            flags: MessageFlags.Ephemeral
        };

        if (interaction.replied || interaction.deferred) {
            await interaction.editReply(errorMessage);
        } else {
            await interaction.reply(errorMessage);
        }
    }
}

// Fonction pour g√©rer le classement
async function handleLeaderboardCommand(interaction) {
    console.log('[XP-SLASH] üîç D√©but handleLeaderboardCommand');

    try {
        await interaction.deferReply();

        const type = interaction.options.getString('type') || 'global';
        console.log('[XP-SLASH] üîç Type de classement:', type);

        let leaderboard = [];
        let title = '';
        let description = '';

        // R√©cup√©rer les donn√©es selon le type
        switch (type) {
            case 'message':
                leaderboard = await messageXPHandler.getLeaderboard(interaction.guild.id, 10);
                title = 'üèÜ Classement XP Messages';
                description = 'Top 10 des utilisateurs avec le plus d\'XP de messages';
                break;
            case 'voice':
                leaderboard = await voiceXPHandler.getVoiceLeaderboard(interaction.guild.id, 10);
                title = 'üèÜ Classement XP Vocal';
                description = 'Top 10 des utilisateurs avec le plus d\'XP vocal';
                break;
            case 'global':
            default:
                // Combiner les deux classements
                const messageLeaderboard = await messageXPHandler.getLeaderboard(interaction.guild.id, 50);
                const voiceLeaderboard = await voiceXPHandler.getVoiceLeaderboard(interaction.guild.id, 50);

                const combinedXp = new Map();

                messageLeaderboard.forEach(user => {
                    combinedXp.set(user.userId, {
                        userId: user.userId,
                        messageXp: user.totalXp,
                        voiceXp: 0,
                        totalXp: user.totalXp
                    });
                });

                voiceLeaderboard.forEach(user => {
                    if (combinedXp.has(user.userId)) {
                        const existing = combinedXp.get(user.userId);
                        existing.voiceXp = user.totalXp;
                        existing.totalXp = existing.messageXp + user.totalXp;
                    } else {
                        combinedXp.set(user.userId, {
                            userId: user.userId,
                            messageXp: 0,
                            voiceXp: user.totalXp,
                            totalXp: user.totalXp
                        });
                    }
                });

                leaderboard = Array.from(combinedXp.values())
                    .sort((a, b) => b.totalXp - a.totalXp)
                    .slice(0, 10)
                    .map(async user => ({
                        userId: user.userId,
                        totalXp: user.totalXp,
                        levelInfo: await XPCalculator.getUserLevelInfo(user.totalXp),
                        messageXp: user.messageXp,
                        voiceXp: user.voiceXp
                    }));

                leaderboard = await Promise.all(leaderboard);
                title = 'üèÜ Classement XP Global';
                description = 'Top 10 des utilisateurs avec le plus d\'XP total';
                break;
        }

        const embed = new EmbedBuilder()
            .setColor(0xf1c40f)
            .setTitle(title)
            .setDescription(description)
            .setFooter({
                text: `Page 1/1 ‚Ä¢ ${interaction.guild.name}`,
                iconURL: interaction.guild.iconURL({ dynamic: true })
            })
            .setTimestamp();

        if (leaderboard.length === 0) {
            embed.addFields({
                name: 'üìä **Top Utilisateurs**',
                value: '```\nü•á Aucun utilisateur trouv√©\nü•à Commencez √† discuter !\nü•â Gagnez de l\'XP en √©tant actif\n```',
                inline: false
            });
        } else {
            // Ajouter les utilisateurs au classement
            let leaderboardText = '';
            for (let i = 0; i < leaderboard.length; i++) {
                const user = leaderboard[i];
                const member = await interaction.guild.members.fetch(user.userId).catch(() => null);
                const displayName = member ? member.displayName : `Utilisateur ${user.userId}`;

                const medal = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : `${i + 1}.`;

                if (type === 'global') {
                    leaderboardText += `${medal} **${displayName}**\n`;
                    leaderboardText += `   üåü Niveau ${user.levelInfo.level} ‚Ä¢ ${XPCalculator.formatXP(user.totalXp)} XP\n`;
                    leaderboardText += `   üí¨ ${XPCalculator.formatXP(user.messageXp)} ‚Ä¢ üé§ ${XPCalculator.formatXP(user.voiceXp)}\n\n`;
                } else {
                    leaderboardText += `${medal} **${displayName}**\n`;
                    leaderboardText += `   üåü Niveau ${user.levelInfo.level} ‚Ä¢ ${XPCalculator.formatXP(user.totalXp)} XP\n\n`;
                }
            }
            embed.setDescription(leaderboardText);
        }

        // Cr√©er les boutons pour le type de classement
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('leaderboard_global')
                    .setLabel('üåü Global')
                    .setStyle(type === 'global' ? ButtonStyle.Primary : ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('leaderboard_message')
                    .setLabel('üí¨ Messages')
                    .setStyle(type === 'message' ? ButtonStyle.Primary : ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('leaderboard_voice')
                    .setLabel('üé§ Vocal')
                    .setStyle(type === 'voice' ? ButtonStyle.Primary : ButtonStyle.Secondary)
            );

        await interaction.editReply({
            embeds: [embed],
            components: [row]
        });

        console.log('[XP-SLASH] ‚úÖ Classement affich√© avec succ√®s');

    } catch (error) {
        console.error('[XP-SLASH] ‚ùå Erreur dans handleLeaderboardCommand:', error);

        const errorMessage = {
            content: '‚ùå Une erreur est survenue lors de la g√©n√©ration du classement.',
            flags: MessageFlags.Ephemeral
        };

        if (interaction.replied || interaction.deferred) {
            await interaction.editReply(errorMessage);
        } else {
            await interaction.reply(errorMessage);
        }
    }
}
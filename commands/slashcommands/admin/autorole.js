import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } from 'discord.js';
import { 
  getGuildAutoRoleConfig, 
  updateGuildAutoRoleConfig, 
  addAutoRole, 
  removeAutoRole, 
  setAutoRoleActive, 
  setAutoRoleLogChannel, 
  resetAutoRoleConfig 
} from '../../../src/store/autoRoleStore.js';

export default {
  data: new SlashCommandBuilder()
    .setName('autorole')
    .setDescription('üé≠ Gestion du syst√®me AutoRole pour l\'attribution automatique de r√¥les')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    .addSubcommand(subcommand =>
      subcommand
        .setName('config')
        .setDescription('üìã Affiche la configuration AutoRole actuelle')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('toggle')
        .setDescription('üîÑ Active ou d√©sactive le syst√®me AutoRole')
        .addBooleanOption(option =>
          option
            .setName('actif')
            .setDescription('Activer (true) ou d√©sactiver (false) l\'AutoRole')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('add')
        .setDescription('‚ûï Ajoute un r√¥le √† la liste AutoRole')
        .addRoleOption(option =>
          option
            .setName('role')
            .setDescription('Le r√¥le √† ajouter √† l\'AutoRole')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('remove')
        .setDescription('‚ûñ Supprime un r√¥le de la liste AutoRole')
        .addRoleOption(option =>
          option
            .setName('role')
            .setDescription('Le r√¥le √† supprimer de l\'AutoRole')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('logs')
        .setDescription('üìù Configure le canal de logs AutoRole')
        .addChannelOption(option =>
          option
            .setName('canal')
            .setDescription('Le canal o√π envoyer les logs AutoRole (laisser vide pour d√©sactiver)')
            .setRequired(false)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('reset')
        .setDescription('üóëÔ∏è R√©initialise compl√®tement la configuration AutoRole')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('panel')
        .setDescription('üéõÔ∏è Affiche le panneau de gestion interactif AutoRole')
    ),

  async execute(interaction) {
    const { guild, options } = interaction;
    const subcommand = options.getSubcommand();

    // V√©rifier les permissions
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
      return interaction.reply({
        embeds: [createErrorEmbed('‚ùå Permission refus√©e', 'Vous devez √™tre administrateur pour utiliser cette commande.')],
        ephemeral: true
      });
    }

    try {
      switch (subcommand) {
        case 'config':
          await handleConfig(interaction);
          break;
        case 'toggle':
          await handleToggle(interaction);
          break;
        case 'add':
          await handleAdd(interaction);
          break;
        case 'remove':
          await handleRemove(interaction);
          break;
        case 'logs':
          await handleLogs(interaction);
          break;
        case 'reset':
          await handleReset(interaction);
          break;
        case 'panel':
          await handlePanel(interaction);
          break;
        default:
          await interaction.reply({
            embeds: [createErrorEmbed('‚ùå Erreur', 'Sous-commande non reconnue.')],
            ephemeral: true
          });
      }
    } catch (error) {
      console.error('Erreur dans la commande autorole:', error);
      
      const errorEmbed = createErrorEmbed(
        '‚ùå Erreur syst√®me',
        'Une erreur inattendue s\'est produite lors de l\'ex√©cution de la commande.'
      );

      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
      } else {
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
    }
  }
};

/**
 * G√®re la sous-commande config
 */
async function handleConfig(interaction) {
  const config = getGuildAutoRoleConfig(interaction.guild.id);
  
  const embed = new EmbedBuilder()
    .setColor(config.active ? 0x00FF00 : 0xFF6B6B)
    .setTitle('üé≠ Configuration AutoRole')
    .setDescription(`Configuration actuelle du syst√®me AutoRole pour **${interaction.guild.name}**`)
    .addFields(
      {
        name: 'üîÑ √âtat',
        value: config.active ? '‚úÖ **Activ√©**' : '‚ùå **D√©sactiv√©**',
        inline: true
      },
      {
        name: 'üéØ R√¥les configur√©s',
        value: config.roles.length > 0 
          ? `**${config.roles.length}** r√¥le(s)\n${config.roles.map(roleId => `<@&${roleId}>`).join('\n')}`
          : '‚ùå Aucun r√¥le configur√©',
        inline: true
      },
      {
        name: 'üìù Canal de logs',
        value: config.logChannelId ? `<#${config.logChannelId}>` : '‚ùå Non configur√©',
        inline: true
      }
    )
    .setFooter({ text: `Serveur: ${interaction.guild.name}`, iconURL: interaction.guild.iconURL() })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

/**
 * G√®re la sous-commande toggle
 */
async function handleToggle(interaction) {
  const active = interaction.options.getBoolean('actif');
  
  setAutoRoleActive(interaction.guild.id, active);
  
  const embed = createSuccessEmbed(
    'üîÑ AutoRole mis √† jour',
    `Le syst√®me AutoRole a √©t√© **${active ? 'activ√©' : 'd√©sactiv√©'}** avec succ√®s.`
  );

  await interaction.reply({ embeds: [embed] });
}

/**
 * G√®re la sous-commande add
 */
async function handleAdd(interaction) {
  const role = interaction.options.getRole('role');
  
  // V√©rifications de s√©curit√©
  if (role.managed) {
    return interaction.reply({
      embeds: [createErrorEmbed('‚ùå Erreur', 'Ce r√¥le est g√©r√© par une int√©gration et ne peut pas √™tre ajout√©.')],
      ephemeral: true
    });
  }

  if (role.position >= interaction.guild.members.me.roles.highest.position) {
    return interaction.reply({
      embeds: [createErrorEmbed('‚ùå Erreur', 'Ce r√¥le est plus √©lev√© que mon r√¥le le plus haut. Je ne peux pas l\'attribuer.')],
      ephemeral: true
    });
  }

  const success = addAutoRole(interaction.guild.id, role.id);
  
  if (success) {
    const embed = createSuccessEmbed(
      '‚ûï R√¥le ajout√©',
      `Le r√¥le ${role} a √©t√© ajout√© √† la liste AutoRole avec succ√®s.`
    );
    await interaction.reply({ embeds: [embed] });
  } else {
    const embed = createWarningEmbed(
      '‚ö†Ô∏è R√¥le d√©j√† pr√©sent',
      `Le r√¥le ${role} est d√©j√† dans la liste AutoRole.`
    );
    await interaction.reply({ embeds: [embed], ephemeral: true });
  }
}

/**
 * G√®re la sous-commande remove
 */
async function handleRemove(interaction) {
  const role = interaction.options.getRole('role');
  
  const success = removeAutoRole(interaction.guild.id, role.id);
  
  if (success) {
    const embed = createSuccessEmbed(
      '‚ûñ R√¥le supprim√©',
      `Le r√¥le ${role} a √©t√© supprim√© de la liste AutoRole avec succ√®s.`
    );
    await interaction.reply({ embeds: [embed] });
  } else {
    const embed = createWarningEmbed(
      '‚ö†Ô∏è R√¥le non trouv√©',
      `Le r√¥le ${role} n'√©tait pas dans la liste AutoRole.`
    );
    await interaction.reply({ embeds: [embed], ephemeral: true });
  }
}

/**
 * G√®re la sous-commande logs
 */
async function handleLogs(interaction) {
  const channel = interaction.options.getChannel('canal');
  
  if (channel) {
    if (!channel.isTextBased()) {
      return interaction.reply({
        embeds: [createErrorEmbed('‚ùå Erreur', 'Le canal doit √™tre un canal textuel.')],
        ephemeral: true
      });
    }

    setAutoRoleLogChannel(interaction.guild.id, channel.id);
    
    const embed = createSuccessEmbed(
      'üìù Canal de logs configur√©',
      `Le canal ${channel} a √©t√© d√©fini comme canal de logs AutoRole.`
    );
    await interaction.reply({ embeds: [embed] });
  } else {
    setAutoRoleLogChannel(interaction.guild.id, null);
    
    const embed = createSuccessEmbed(
      'üìù Logs d√©sactiv√©s',
      'Les logs AutoRole ont √©t√© d√©sactiv√©s.'
    );
    await interaction.reply({ embeds: [embed] });
  }
}

/**
 * G√®re la sous-commande reset
 */
async function handleReset(interaction) {
  const embed = new EmbedBuilder()
    .setColor(0xFF6B6B)
    .setTitle('üóëÔ∏è Confirmation de r√©initialisation')
    .setDescription('‚ö†Ô∏è **Attention !** Cette action va supprimer toute la configuration AutoRole.\n\n**Cela inclut :**\n‚Ä¢ D√©sactivation de l\'AutoRole\n‚Ä¢ Suppression de tous les r√¥les configur√©s\n‚Ä¢ Suppression du canal de logs\n\n**Cette action est irr√©versible !**')
    .setFooter({ text: 'Cliquez sur "Confirmer" pour proc√©der √† la r√©initialisation.' });

  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('autorole_reset_confirm')
        .setLabel('Confirmer la r√©initialisation')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üóëÔ∏è'),
      new ButtonBuilder()
        .setCustomId('autorole_reset_cancel')
        .setLabel('Annuler')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚ùå')
    );

  await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}

/**
 * G√®re la sous-commande panel
 */
async function handlePanel(interaction) {
  const config = getGuildAutoRoleConfig(interaction.guild.id);
  
  const embed = new EmbedBuilder()
    .setColor(0x5865F2)
    .setTitle('üéõÔ∏è Panneau de Gestion AutoRole')
    .setDescription(`**Serveur :** ${interaction.guild.name}\n**√âtat :** ${config.active ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©'}\n**R√¥les configur√©s :** ${config.roles.length}`)
    .addFields(
      {
        name: 'üéØ R√¥les AutoRole',
        value: config.roles.length > 0 
          ? config.roles.map(roleId => `<@&${roleId}>`).join('\n')
          : 'Aucun r√¥le configur√©',
        inline: false
      },
      {
        name: 'üìù Canal de logs',
        value: config.logChannelId ? `<#${config.logChannelId}>` : 'Non configur√©',
        inline: true
      }
    )
    .setFooter({ text: 'Utilisez les boutons ci-dessous pour g√©rer l\'AutoRole' })
    .setTimestamp();

  const row1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('autorole_toggle')
        .setLabel(config.active ? 'D√©sactiver' : 'Activer')
        .setStyle(config.active ? ButtonStyle.Danger : ButtonStyle.Success)
        .setEmoji(config.active ? '‚ùå' : '‚úÖ'),
      new ButtonBuilder()
        .setCustomId('autorole_add')
        .setLabel('Ajouter un r√¥le')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('‚ûï'),
      new ButtonBuilder()
        .setCustomId('autorole_remove')
        .setLabel('Supprimer un r√¥le')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚ûñ')
    );

  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('autorole_logs')
        .setLabel('Configurer les logs')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìù'),
      new ButtonBuilder()
        .setCustomId('autorole_reset')
        .setLabel('R√©initialiser')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üóëÔ∏è')
    );

  await interaction.reply({ embeds: [embed], components: [row1, row2] });
}

/**
 * Cr√©e un embed de succ√®s
 */
function createSuccessEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(0x00FF00)
    .setTitle(title)
    .setDescription(description)
    .setTimestamp();
}

/**
 * Cr√©e un embed d'erreur
 */
function createErrorEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(0xFF0000)
    .setTitle(title)
    .setDescription(description)
    .setTimestamp();
}

/**
 * Cr√©e un embed d'avertissement
 */
function createWarningEmbed(title, description) {
  return new EmbedBuilder()
    .setColor(0xFFAA00)
    .setTitle(title)
    .setDescription(description)
    .setTimestamp();
}

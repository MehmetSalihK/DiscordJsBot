import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('suspension')
        .setDescription('Syst√®me de suspensions progressives')
        .addSubcommand(subcommand =>
            subcommand
                .setName('panel')
                .setDescription('Afficher le panneau principal du syst√®me'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('config')
                .setDescription('Acc√©der directement √† la configuration'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('status')
                .setDescription('Voir le statut d\'un utilisateur')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur √† v√©rifier')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('reset')
                .setDescription('R√©initialiser les donn√©es d\'un utilisateur')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur √† r√©initialiser')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('historique')
                .setDescription('D√©finir le salon de logs')
                .addChannelOption(option =>
                    option.setName('salon')
                        .setDescription('Le salon pour les logs')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('test')
                .setDescription('Tester une sanction (sandbox)')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur pour le test')
                        .setRequired(true))
                .addIntegerOption(option =>
                    option.setName('niveau')
                        .setDescription('Niveau de suspension √† tester')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Niveau 1', value: 1 },
                            { name: 'Niveau 2', value: 2 },
                            { name: 'Niveau 3', value: 3 }
                        )))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild),

    async execute(interaction) {
        // V√©rifier les permissions
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageGuild) && 
            !interaction.member.permissions.has(PermissionFlagsBits.BanMembers)) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå Permissions insuffisantes')
                .setDescription('Vous devez avoir la permission de g√©rer le serveur ou bannir des membres.')
                .setTimestamp();
            
            return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'panel':
                await showMainPanel(interaction);
                break;
            case 'config':
                await showConfigPanel(interaction);
                break;
            case 'status':
                await showUserStatus(interaction);
                break;
            case 'reset':
                await resetUser(interaction);
                break;
            case 'historique':
                await handleLogsCommand(interaction);
                break;
            case 'test':
                await testSanction(interaction);
                break;
            default:
                await showMainPanel(interaction);
        }
    }
};

async function showMainPanel(interaction) {
    const introEmbed = new EmbedBuilder()
        .setColor('#0099FF')
        .setTitle('üîí Syst√®me de suspensions progressives')
        .setDescription(`Ce module permet de :
‚Ä¢ Enregistrer des avertissements (\`/warn\`)
‚Ä¢ Appliquer automatiquement des suspensions progressives (3 niveaux)
‚Ä¢ Configurer les r√¥les, dur√©es, salons de logs et actions
‚Ä¢ G√©rer les utilisateurs via un panneau avec boutons

‚ÑπÔ∏è **Actions rapides :**`)
        .addFields(
            { name: '‚öôÔ∏è Configuration', value: 'Param√©trer les r√¥les, dur√©es et options', inline: true },
            { name: 'üìä Statut serveur', value: 'Voir les statistiques et utilisateurs sanctionn√©s', inline: true },
            { name: 'üßæ Logs', value: 'Consulter l\'historique des sanctions', inline: true },
            { name: 'üîî Activation', value: 'Activer/d√©sactiver le syst√®me automatique', inline: true },
            { name: 'üîÑ Test', value: 'Tester le syst√®me en mode sandbox', inline: true },
            { name: '‚ùå Fermer', value: 'Fermer ce panneau', inline: true }
        )
        .setFooter({ text: 'Syst√®me de Suspensions Progressives ‚Ä¢ Cliquez sur les boutons ci-dessous' })
        .setTimestamp();

    const actionRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('suspension_config')
                .setLabel('Configurer')
                .setEmoji('‚öôÔ∏è')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('suspension_status')
                .setLabel('Statut serveur')
                .setEmoji('üìä')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('suspension_logs')
                .setLabel('Voir logs')
                .setEmoji('üßæ')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('suspension_toggle')
                .setLabel('Activer/D√©sactiver')
                .setEmoji('üîî')
                .setStyle(ButtonStyle.Success)
        );

    const actionRow2 = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('suspension_test')
                .setLabel('Test')
                .setEmoji('üîÑ')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('suspension_close')
                .setLabel('Fermer')
                .setEmoji('‚ùå')
                .setStyle(ButtonStyle.Danger)
        );

    await interaction.reply({ 
        embeds: [introEmbed], 
        components: [actionRow, actionRow2],
        ephemeral: false 
    });
}

async function showConfigPanel(interaction) {
    const configEmbed = new EmbedBuilder()
        .setColor('#FFA500')
        .setTitle('‚öôÔ∏è Panneau de configuration')
        .setDescription('Configurez tous les aspects du syst√®me de suspensions progressives.')
        .addFields(
            { name: 'üõ†Ô∏è Param√®tres g√©n√©raux', value: 'Seuil d\'avertissements, auto-reset, notifications', inline: true },
            { name: 'üè∑Ô∏è R√¥les de suspension', value: 'Cr√©er automatiquement ou choisir des r√¥les existants', inline: true },
            { name: '‚è±Ô∏è Dur√©es par palier', value: 'D√©finir les dur√©es pour chaque niveau', inline: true },
            { name: 'üß≠ Canaux autoris√©s', value: 'Configurer les salons visibles par niveau', inline: true },
            { name: 'üì¢ Salon logs', value: 'Choisir le salon pour les logs de sanctions', inline: true },
            { name: '‚Ü©Ô∏è R√©initialiser', value: 'Remettre la configuration par d√©faut', inline: true }
        )
        .setFooter({ text: 'Configuration du syst√®me ‚Ä¢ Choisissez une option' })
        .setTimestamp();

    const configRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('suspension_config_general')
                .setLabel('Param√®tres g√©n√©raux')
                .setEmoji('üõ†Ô∏è')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('suspension_config_roles')
                .setLabel('R√¥les de suspension')
                .setEmoji('üè∑Ô∏è')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('suspension_config_durations')
                .setLabel('Dur√©es par palier')
                .setEmoji('‚è±Ô∏è')
                .setStyle(ButtonStyle.Primary)
        );

    const configRow2 = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('suspension_config_channels')
                .setLabel('Canaux autoris√©s')
                .setEmoji('üß≠')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('suspension_config_logs')
                .setLabel('Salon logs')
                .setEmoji('üì¢')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('suspension_config_reset')
                .setLabel('R√©initialiser')
                .setEmoji('‚Ü©Ô∏è')
                .setStyle(ButtonStyle.Danger)
        );

    const backRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('suspension_back')
                .setLabel('Retour')
                .setEmoji('‚¨ÖÔ∏è')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({ 
        embeds: [configEmbed], 
        components: [configRow, configRow2, backRow],
        ephemeral: true 
    });
}

async function showUserStatus(interaction) {
    const user = interaction.options.getUser('utilisateur');
    
    // TODO: Impl√©menter la logique de statut utilisateur
    const statusEmbed = new EmbedBuilder()
        .setColor('#0099FF')
        .setTitle(`üìä Statut de ${user.username}`)
        .setDescription('Informations sur les sanctions de cet utilisateur')
        .addFields(
            { name: '‚ö†Ô∏è Avertissements', value: '0/3', inline: true },
            { name: 'üîí Niveau de suspension', value: 'Aucun', inline: true },
            { name: '‚è∞ Expire le', value: 'N/A', inline: true }
        )
        .setThumbnail(user.displayAvatarURL())
        .setTimestamp();

    await interaction.reply({ embeds: [statusEmbed], ephemeral: true });
}

async function resetUser(interaction) {
    const user = interaction.options.getUser('utilisateur');
    
    // TODO: Impl√©menter la logique de reset
    const resetEmbed = new EmbedBuilder()
        .setColor('#00FF00')
        .setTitle('üîÑ Utilisateur r√©initialis√©')
        .setDescription(`Toutes les donn√©es de suspension de ${user} ont √©t√© r√©initialis√©es.`)
        .setTimestamp();

    await interaction.reply({ embeds: [resetEmbed], ephemeral: true });
}

async function handleLogsCommand(interaction) {
    const channel = interaction.options.getChannel('salon');
    
    // TODO: Impl√©menter la logique de configuration des logs
    const logsEmbed = new EmbedBuilder()
        .setColor('#00FF00')
        .setTitle('üì¢ Salon de logs configur√©')
        .setDescription(`Le salon ${channel} a √©t√© d√©fini comme salon de logs.`)
        .setTimestamp();

    await interaction.reply({ embeds: [logsEmbed], ephemeral: true });
}

async function testSanction(interaction) {
    const user = interaction.options.getUser('utilisateur');
    const level = interaction.options.getInteger('niveau');
    
    const testEmbed = new EmbedBuilder()
        .setColor('#FFA500')
        .setTitle('üîÑ Test de sanction')
        .setDescription(`Test de suspension niveau ${level} sur ${user} (mode sandbox)`)
        .addFields(
            { name: '‚ö†Ô∏è Mode test', value: 'Aucune action r√©elle n\'a √©t√© effectu√©e', inline: false }
        )
        .setTimestamp();

    await interaction.reply({ embeds: [testEmbed], ephemeral: true });
}
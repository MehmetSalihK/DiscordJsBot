import { SlashCommandBuilder, EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder, PermissionFlagsBits, ChannelType } from 'discord.js';

export default {
    category: 'admin',
    data: new SlashCommandBuilder()
        .setName('autovc')
        .setDescription('Configure les salons vocaux automatiques')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('Configure un salon ma√Ætre pour les salons vocaux automatiques')
        ),
    
    async execute(interaction) {
        try {
            if (interaction.options.getSubcommand() === 'setup') {
                // R√©cup√©rer tous les salons vocaux du serveur
                const voiceChannels = interaction.guild.channels.cache
                    .filter(channel => channel.type === ChannelType.GuildVoice)
                    .map(channel => ({
                        label: channel.name,
                        value: channel.id,
                        description: `ID: ${channel.id}`
                    }));

                if (voiceChannels.length === 0) {
                    const errorEmbed = new EmbedBuilder()
                        .setColor('#FF4444')
                        .setTitle('‚ùå Aucun salon vocal')
                        .setDescription('Aucun salon vocal trouv√© sur ce serveur.')
                        .addFields(
                            { name: 'üí° Solution', value: 'Cr√©ez d\'abord un salon vocal pour l\'utiliser comme salon ma√Ætre.', inline: false }
                        )
                        .setTimestamp()
                        .setFooter({ text: 'üéµ Auto Voice Channel System', iconURL: interaction.guild.iconURL() });
                    
                    return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
                }

                // Limiter √† 25 options maximum (limite Discord)
                const limitedChannels = voiceChannels.slice(0, 25);

                const selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('select_master_channel')
                    .setPlaceholder('S√©lectionnez un salon vocal ma√Ætre')
                    .addOptions(limitedChannels);

                const row = new ActionRowBuilder().addComponents(selectMenu);

                const embed = new EmbedBuilder()
                    .setColor('#7289DA')
                    .setTitle('üéµ Configuration des salons vocaux automatiques')
                    .setDescription('S√©lectionnez un salon vocal qui servira de **salon ma√Ætre**.')
                    .addFields(
                        { name: 'üìã Comment √ßa fonctionne ?', value: 'Quand un utilisateur rejoint le salon ma√Ætre, un nouveau salon vocal personnel lui sera automatiquement cr√©√©.', inline: false },
                        { name: 'üéõÔ∏è Fonctionnalit√©s', value: '‚Ä¢ Salon personnel avec permissions\n‚Ä¢ Panel de gestion int√©gr√©\n‚Ä¢ Suppression automatique quand vide', inline: false },
                        { name: '‚öôÔ∏è √âtape suivante', value: 'Choisissez le salon vocal dans le menu ci-dessous.', inline: false }
                    )
                    .setTimestamp()
                    .setFooter({ text: 'üéµ Auto Voice Channel System', iconURL: interaction.guild.iconURL() });

                await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
            }
        } catch (error) {
            console.error('[AUTO-VC] Erreur dans la commande autovc:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF4444')
                .setTitle('‚ùå Erreur syst√®me')
                .setDescription('Une erreur est survenue lors du traitement de votre commande.')
                .setTimestamp()
                .setFooter({ text: 'üéµ Auto Voice Channel System', iconURL: interaction.guild.iconURL() });
            
            await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }
    }
};
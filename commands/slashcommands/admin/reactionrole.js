import { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default {
    data: new SlashCommandBuilder()
        .setName('reactionrole')
        .setDescription('Gestion des r√¥les de r√©action (Administrateurs uniquement)')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addSubcommand(subcommand =>
            subcommand
                .setName('add')
                .setDescription('Ajouter un r√¥le de r√©action')
                .addStringOption(option =>
                    option.setName('message_id')
                        .setDescription('ID du message')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('emoji')
                        .setDescription('Emoji √† utiliser')
                        .setRequired(true))
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('R√¥le √† attribuer')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('Supprimer un r√¥le de r√©action')
                .addStringOption(option =>
                    option.setName('message_id')
                        .setDescription('ID du message')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('emoji')
                        .setDescription('Emoji √† supprimer')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('Lister tous les r√¥les de r√©action'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('panel')
                .setDescription('Afficher le panel de gestion'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('logs')
                .setDescription('Configurer les logs des r√¥les de r√©action')
                .addChannelOption(option =>
                    option.setName('channel')
                        .setDescription('Canal pour les logs (laisser vide pour d√©sactiver)')
                        .setRequired(false))),

    async execute(interaction) {
        // V√©rification des permissions administrateur
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            return interaction.reply({
                content: '‚ùå Vous devez √™tre administrateur pour utiliser cette commande.',
                ephemeral: true
            });
        }

        const subcommand = interaction.options.getSubcommand();
        const configPath = path.join(__dirname, '../../../data/reactionroles.json');

        try {
            let config = [];
            try {
                const data = await fs.readFile(configPath, 'utf8');
                config = JSON.parse(data);
            } catch (error) {
                // Fichier n'existe pas encore
            }

            switch (subcommand) {
                case 'add':
                    await handleAdd(interaction, config, configPath);
                    break;
                case 'remove':
                    await handleRemove(interaction, config, configPath);
                    break;
                case 'list':
                    await handleList(interaction, config);
                    break;
                case 'panel':
                    await handlePanel(interaction);
                    break;
                case 'logs':
                    await handleLogs(interaction);
                    break;
            }
        } catch (error) {
            console.error('Erreur dans reactionrole:', error);
            await interaction.reply({
                content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.',
                ephemeral: true
            });
        }
    }
};

async function handleAdd(interaction, config, configPath) {
    const messageId = interaction.options.getString('message_id');
    const emoji = interaction.options.getString('emoji');
    const role = interaction.options.getRole('role');

    // V√©rifier si le message existe
    try {
        await interaction.channel.messages.fetch(messageId);
    } catch (error) {
        return await interaction.reply({
            content: '‚ùå Message introuvable dans ce canal.',
            ephemeral: true
        });
    }

    // Extraire l'ID de l'emoji
    let emojiId = emoji;
    const customEmojiMatch = emoji.match(/<a?:\w+:(\d+)>/);
    if (customEmojiMatch) {
        emojiId = customEmojiMatch[1];
    }

    // Trouver ou cr√©er la r√®gle pour ce message
    let messageRule = config.find(rule => rule.id_message === messageId);
    if (!messageRule) {
        messageRule = {
            id_salon: interaction.channel.id,
            id_message: messageId,
            reactions: []
        };
        config.push(messageRule);
    }

    // V√©rifier si l'emoji existe d√©j√†
    const existingReaction = messageRule.reactions.find(r => r.id_emoji === emojiId);
    if (existingReaction) {
        return await interaction.reply({
            content: '‚ùå Cet emoji est d√©j√† configur√© pour ce message.',
            ephemeral: true
        });
    }

    // Ajouter la nouvelle r√©action
    messageRule.reactions.push({
        id_emoji: emojiId,
        id_role: role.id
    });

    // Sauvegarder
    await fs.writeFile(configPath, JSON.stringify(config, null, 2));

    // Ajouter la r√©action au message
    try {
        const message = await interaction.channel.messages.fetch(messageId);
        await message.react(emoji);
    } catch (error) {
        console.error('Erreur lors de l\'ajout de la r√©action:', error);
    }

    const embed = new EmbedBuilder()
        .setTitle('‚úÖ R√¥le de r√©action ajout√©')
        .setDescription(`**Message:** ${messageId}\n**Emoji:** ${emoji}\n**R√¥le:** ${role}`)
        .setColor(0x00ff00)
        .setTimestamp();

    await interaction.reply({ embeds: [embed], ephemeral: true });
}

async function handleRemove(interaction, config, configPath) {
    const messageId = interaction.options.getString('message_id');
    const emoji = interaction.options.getString('emoji');

    // Extraire l'ID de l'emoji
    let emojiId = emoji;
    const customEmojiMatch = emoji.match(/<a?:\w+:(\d+)>/);
    if (customEmojiMatch) {
        emojiId = customEmojiMatch[1];
    }

    // Trouver la r√®gle
    const messageRule = config.find(rule => rule.id_message === messageId);
    if (!messageRule) {
        return await interaction.reply({
            content: '‚ùå Aucune r√®gle trouv√©e pour ce message.',
            ephemeral: true
        });
    }

    // Trouver et supprimer la r√©action
    const reactionIndex = messageRule.reactions.findIndex(r => r.id_emoji === emojiId);
    if (reactionIndex === -1) {
        return await interaction.reply({
            content: '‚ùå Aucune r√®gle trouv√©e pour cet emoji.',
            ephemeral: true
        });
    }

    messageRule.reactions.splice(reactionIndex, 1);

    // Si plus de r√©actions, supprimer la r√®gle compl√®te
    if (messageRule.reactions.length === 0) {
        const ruleIndex = config.findIndex(rule => rule.id_message === messageId);
        config.splice(ruleIndex, 1);
    }

    // Sauvegarder
    await fs.writeFile(configPath, JSON.stringify(config, null, 2));

    const embed = new EmbedBuilder()
        .setTitle('‚úÖ R√¥le de r√©action supprim√©')
        .setDescription(`**Message:** ${messageId}\n**Emoji:** ${emoji}`)
        .setColor(0xff0000)
        .setTimestamp();

    await interaction.reply({ embeds: [embed], ephemeral: true });
}

async function handleList(interaction, config) {
    if (config.length === 0) {
        return await interaction.reply({
            content: 'üìù Aucun r√¥le de r√©action configur√©.',
            ephemeral: true
        });
    }

    const embed = new EmbedBuilder()
        .setTitle('üìã Liste des r√¥les de r√©action')
        .setColor(0x0099ff)
        .setTimestamp();

    let description = '';
    for (const rule of config) {
        description += `**Message:** ${rule.id_message}\n`;
        description += `**Canal:** <#${rule.id_salon}>\n`;
        description += `**R√©actions:**\n`;
        
        for (const reaction of rule.reactions) {
            const role = interaction.guild.roles.cache.get(reaction.id_role);
            const emoji = interaction.guild.emojis.cache.get(reaction.id_emoji) || reaction.id_emoji;
            description += `  ‚Ä¢ ${emoji} ‚Üí ${role || 'R√¥le introuvable'}\n`;
        }
        description += '\n';
    }

    embed.setDescription(description);
    await interaction.reply({ embeds: [embed], ephemeral: true });
}

async function handlePanel(interaction) {
    const embed = new EmbedBuilder()
        .setTitle('üéõÔ∏è Panel de gestion des r√¥les de r√©action')
        .setDescription('Utilisez les boutons ci-dessous pour g√©rer les r√¥les de r√©action.')
        .setColor(0x0099ff)
        .setTimestamp();

    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('rr_add')
                .setLabel('Ajouter')
                .setStyle(ButtonStyle.Success)
                .setEmoji('‚ûï'),
            new ButtonBuilder()
                .setCustomId('rr_remove')
                .setLabel('Supprimer')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('‚ûñ'),
            new ButtonBuilder()
                .setCustomId('rr_list')
                .setLabel('Lister')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üìã'),
            new ButtonBuilder()
                .setCustomId('rr_logs')
                .setLabel('Logs')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('üìù')
        );

    await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
}

async function handleLogs(interaction) {
    const channel = interaction.options.getChannel('channel');
    
    // Ici on pourrait sauvegarder la configuration des logs
    // Pour l'instant, on fait juste une r√©ponse simple
    
    if (channel) {
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ Logs configur√©s')
            .setDescription(`Les logs des r√¥les de r√©action seront envoy√©s dans ${channel}`)
            .setColor(0x00ff00)
            .setTimestamp();
        
        await interaction.reply({ embeds: [embed], ephemeral: true });
    } else {
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ Logs d√©sactiv√©s')
            .setDescription('Les logs des r√¥les de r√©action ont √©t√© d√©sactiv√©s.')
            .setColor(0xff0000)
            .setTimestamp();
        
        await interaction.reply({ embeds: [embed], ephemeral: true });
    }
}
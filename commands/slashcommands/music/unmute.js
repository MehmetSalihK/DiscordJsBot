import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';

export const data = new SlashCommandBuilder()
    .setName('unmutebot')
    .setDescription('D√©sactive la sourdine du bot');

export async function execute(interaction) {
    try {
        const guild = interaction.guild;
        const botMember = guild.members.me;
        const botVoiceChannel = botMember.voice.channel;
        
        if (!botVoiceChannel) {
            const embed = new EmbedBuilder()
                .setColor('#ff6b6b')
                .setTitle('‚ùå Erreur')
                .setDescription('Le bot n\'est pas connect√© √† un salon vocal.')
                .setTimestamp();
            
            return await interaction.reply({ embeds: [embed], flags: 64 }); // MessageFlags.Ephemeral
        }
        
        // D√©sactiver la sourdine auto
        if (botMember.voice.selfMute) {
            await botMember.voice.setSelfMute(false);
        }
        
        // Note: La sourdine serveur ne peut pas √™tre d√©sactiv√©e par le bot lui-m√™me
        // Elle doit √™tre d√©sactiv√©e manuellement par un mod√©rateur
        
        const embed = new EmbedBuilder()
            .setColor('#4CAF50')
            .setTitle('üîä Sourdine d√©sactiv√©e')
            .setDescription('La sourdine automatique du bot a √©t√© d√©sactiv√©e.')
            .addFields(
                { 
                    name: 'üí° Note', 
                    value: 'Si le bot est toujours en sourdine, un mod√©rateur doit le d√©sactiver manuellement (clic droit sur le bot ‚Üí D√©sactiver la sourdine).' 
                }
            )
            .setTimestamp();
        
        await interaction.reply({ embeds: [embed] });
        
    } catch (error) {
        console.error('Erreur lors de la d√©sactivation de la sourdine:', error);
        const errorEmbed = new EmbedBuilder()
            .setColor('#ff6b6b')
            .setTitle('‚ùå Erreur')
            .setDescription('Une erreur s\'est produite lors de la d√©sactivation de la sourdine.')
            .setTimestamp();
        
        await interaction.reply({ embeds: [errorEmbed], flags: 64 }); // MessageFlags.Ephemeral
    }
}





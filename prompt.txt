Create a Reaction-Role system for a Discord bot in Node.js using discord.js v14.
The bot UI and messages must be in French. All admin confirmations and modals should use Discord embeds + emojis.
The system must be multi-server: every server keeps its own configuration stored in JSON files under ./json/.

Important requirements:
- Admins choose the log channel IDs and enable/disable logs per server.
- Admins enable/disable the global ReactionRole feature per server.
- Full interactive configuration through a management panel (embed + buttons + select menus).
- Support both: classic reaction roles (user reacts with emoji) and component roles (Select Menu / Buttons).
- Persist all mappings and settings to JSON so restarts do not lose data.
- Respect permissions and role hierarchy. Bot must check it has ManageRoles and its top role is above target roles.

---

## Project structure (suggested)
./commands/
  /prefix/
    /admin/
      reactionrole.js      # prefix wrapper / panel
      rr-create.js         # create reaction role message
      rr-add.js            # add role to message
      rr-remove.js         # remove role
      rr-setlog.js         # set log channel
      rr-enable.js         # enable/disable feature
      rr-list.js           # list all rr messages
      rr-delete.js         # delete mapping & optionally delete message
  /slashcommands/
    /admin/
      reactionrole (panel)
      rr-create
      rr-add
      rr-remove
      rr-setlog
      rr-enable
      rr-list
      rr-delete
/events/
  messageReactionAdd.js
  messageReactionRemove.js
  interactionCreate.js    # handles panel buttons/selects
/json/
  servers.json            # per-server global settings (prefix, log channels, toggles)
  reactionRoles.json      # all reaction-role mappings per guild
/utils/
  permissionChecks.js
  jsonStorage.js
  embedHelpers.js
  emojiNormalizer.js

---

## JSON schema examples

./json/servers.json
{
  "GUILD_ID": {
    "name": "My Server",
    "prefix": "!",
    "reactionRole": {
      "enabled": true,
      "logChannelId": "LOG_CH_ID",
      "logsActive": true
    },
    "otherSettings": {...}
  }
}

./json/reactionRoles.json
{
  "GUILD_ID": {
    "messages": {
      "MESSAGE_ID_1": {
        "channelId": "CHANNEL_ID",
        "messageId": "MESSAGE_ID_1",
        "authorId": "ADMIN_ID",
        "title": "R√¥les d'arriv√©e",
        "description": "R√©agis pour obtenir un r√¥le",
        "type": "reaction", // or "select" or "button"
        "exclusive": false,      // if true, user only keeps one role from this message (remove others)
        "removeOnUnreact": true, // if true, remove role when user removes reaction
        "entries": [             // list of role mappings
          { "emoji": "‚úÖ", "roleId": "ROLE_ID_1" },
          { "emoji": "üî•", "roleId": "ROLE_ID_2" },
          { "emoji": "<:custom:123456789012>", "roleId": "ROLE_ID_3" }
        ],
        "createdAt": 1690000000000
      },
      "MESSAGE_ID_2": { ... }
    }
  }
}

Notes:
- Store emoji as a stable identifier (unicode or custom in format "<:name:id>").
- `exclusive` allows ‚Äúchoose one‚Äù behavior (remove other roles in same message when reacting).
- `removeOnUnreact` controls whether removing reaction removes role.

---

## Commands & Panel behavior (Admin only)
All commands respond with embeds and show ephemeral confirmations for button clicks if appropriate.

### 1) `/reactionrole panel` or `!reactionrole panel`
- Opens a management embed summarizing current guild reaction-role settings:
  - Status: enabled/disabled
  - Log channel: #channel or "non d√©fini"
  - Total messages configured
- Under embed: Buttons
  - ‚ûï **Cr√©er** ‚Äî start interactive flow to create a new reaction-role message
  - üìù **Ajouter** ‚Äî prompt to select an existing message and add role mapping
  - ‚ûñ **Supprimer** ‚Äî choose role mapping to remove (select menu)
  - ‚öôÔ∏è **Param√®tres** ‚Äî opens subpanel:
    - üîÅ Toggle exclusive on/off (checkbox per message or single global default)
    - üßπ Reset message
    - üìç Set Log Channel
    - ‚úÖ Enable/Disable ReactionRole
  - üóëÔ∏è **Supprimer message** ‚Äî delete mapping (optionally delete message)

Flow details:
- Create flow (‚ûï):
  1. Ask admin (modal or ephemeral reply) for channel to post message in (mention or ID).
  2. Ask title + description for embed.
  3. Post a preview embed in target channel (with placeholder ‚ÄúAucune r√©action pour l‚Äôinstant‚Äù).
  4. Return to admin and show UI to add role bindings: Admin clicks ‚ûï Add Role ‚Üí bot asks to mention role and emoji (support typing emoji or reacting to ephemeral message with chosen emoji).
  5. When mapping added: bot edits posted message to include mapping list and adds the emoji to the target message if it is a reaction-type mapping. Save mapping to reactionRoles.json.

- Add role (üìù) flow:
  - Admin chooses message (select menu of configured messages), then chooses role @role, then chooses emoji (either send emoji or click reaction). Bot normalizes emoji and registers mapping, adds reaction to the target message if possible.

- Remove role (‚ûñ) flow:
  - Show select of current entries (emoji + role). Confirm removal.

- Set log channel:
  - Button opens a prompt: ask admin to mention channel or choose from select menu. Save `servers.json[guild].reactionRole.logChannelId`. Confirm with embed.

- Enable/Disable global ReactionRole:
  - Toggle button flips `servers.json[guild].reactionRole.enabled` and responds embed.

---

## Events & runtime behavior

### messageReactionAdd / messageReactionRemove (or component interactions)
- Use partials and required intents:
  - Intents: GUILDS, GUILD_MEMBERS, GUILD_MESSAGES, GUILD_MESSAGE_REACTIONS
  - Enable partials: `Partials.Message`, `Partials.Channel`, `Partials.Reaction`
- On `messageReactionAdd`:
  1. Normalize emoji (unicode vs custom).
  2. Look up guild ‚Üí message mapping ‚Üí find matching entry by `messageId` and `emoji`.
  3. Permission checks:
     - Bot has `ManageRoles`.
     - The role exists and bot can manage it (bot role higher).
     - The member exists in guild.
  4. If `exclusive` true:
     - Remove other roles from this message (iterate entries; if user has any, remove them).
  5. Add role (member.roles.add(roleId)).
  6. If `logsActive` (servers.json) and `logChannelId` is set ‚Üí send embed log:
     - Title: "üé´ ReactionRole ‚Äì r√¥le attribu√©"
     - Fields: User, Role, Message, Channel, Type (reaction/select), Time.
  7. If `removeOnUnreact` is false, do not remove role on unreact.

- On `messageReactionRemove`:
  - If mapping exists and `removeOnUnreact` true: remove role from member and log if enabled.

- On deletion of mapped message:
  - Watch `messageDelete` events; if a mapped message is deleted, remove mapping and optionally log.

- On bot restart:
  - On ready, re-add reactions for each mapped message (if still exists and accessible) to ensure reactions are present.

---

## Component (Select Menu / Buttons) alternative
- For many roles per message use a Select Menu (max 25 options).
- Build select menu with `customId: rr_select_<guildId>_<messageId>`.
- When a user selects options:
  - Add roles for selected options; if exclusive ‚Üí remove others.
  - If option `removeOnUnselect`, remove roles when user unselects ‚Äî implement by comparing previous selection (store user selections in memory or check roles directly).
- Buttons per role are also possible (`rr_btn_<guildId>_<messageId>_<roleId>`): clicking toggles the role (add/remove). Good for 1-click UX but many buttons clutter.

---

## Logging
- Admin sets a `logChannelId` via `!rr setlog #channel` or panel.
- Log embed format (French):
  - Title e.g. "üéØ ReactionRole ‚Äî R√¥le attribu√©"
  - Fields:
    - üë§ Utilisateur: @user (ID)
    - üè∑Ô∏è R√¥le: @role (ID)
    - üì® Message: link to message (channel + jump url)
    - üîÅ Mode: R√©action / S√©lecteur / Bouton
    - ‚è± Date: <timestamp>
  - Color: green for add, orange for remove, red for errors.

---

## Validation, Permissions & Safety
- All admin commands must check `member.permissions.has('ManageGuild')` or `Administrator`.
- Before adding a role onto a user, check:
  - Bot has `ManageRoles`.
  - Bot's highest role position > target role position.
  - Role is not managed by integration (managed roles cannot be assigned).
- If permission check fails, respond with an embed error explaining the required permissions and how to fix (e.g. move bot role above target role).

---

## Edge cases & Best practices
- Normalize emoji input robustly (unicode emoji, shortcodes, custom emoji `<:name:id>`, guild emoji ids).
- When adding reactions to message, handle `Missing Permissions` gracefully.
- Rate-limit adding initial reactions (do not spam Discord API).
- Auto-repair: on startup try to reapply reactions for mapped messages; if message or channel not accessible, mark mapping as invalid and log to admin.
- Use ephemeral confirmations for admin actions where appropriate.
- Provide `rr-list` to display configured messages and entries (paginated if many).
- Provide `rr-export` / `rr-import` to backup/restore mappings (json).

---

## Deliverables (what to create)
1. Slash + Prefix admin commands for full lifecycle:
   - create, add, remove, setlog, enable/disable, panel, list, delete
2. Event handlers for reaction add/remove, message delete, ready (reapply reactions)
3. Persistent storage: ./json/servers.json and ./json/reactionRoles.json with clear schema
4. Full embed templates (panel, previews, logs, errors) in French
5. Button/select customId naming convention documented
6. Permission checks and helpful error messages
7. Startup task that repairs or flags invalid mappings
8. Example content for a posted reaction-role message (embed layout)

---

## Example admin panel embed (French)
Title: ‚öôÔ∏è Panel Reaction-Role  
Fields:
- üîî Statut: ‚úÖ Activ√©
- üì¶ Messages configur√©s: 2
- üßæ Salon logs: #reaction-logs (ID)
Description: "Utilise les boutons ci-dessous pour cr√©er, modifier ou supprimer des Reaction-Roles. Les changements sont sauvegard√©s automatiquement."
Buttons:
[‚ûï Cr√©er] [üìù Ajouter] [‚ûñ Supprimer] [‚öôÔ∏è Param√®tres] [üóëÔ∏è Suppr. message]

---

## Notes for implementer
- Use `MessageComponentCollector` or `interactionCreate` to handle button/select interactions.
- Make sure `customId` encodes guild and message ids to locate the mapping quickly.
- Keep functions small and modular: storage helper, emoji normalizer, role applier, logger helper.


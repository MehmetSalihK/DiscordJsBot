Create a full-featured XP & Leveling system for a Discord.js v14 bot.

‚öôÔ∏è Requirements (global)
- All user-facing text in FRENCH.
- Both prefix and slash commands supported.
- Use intents: Guilds, GuildMessages, GuildMembers, GuildVoiceStates.
- Store all data in JSON files under ./json/ (e.g. voiceXp.json, messageXp.json, levelConfig.json).
- Use fs.promises with a write-queue/debounce to avoid JSON corruption.
- Provide clean console logs (use chalk optionally).
- Validate bot has required permissions (SendMessages, ManageRoles if role rewards, ManageChannels if needed).

üéØ Features overview
1. Message XP
  - Users earn XP for sending messages.
  - Configurable `xpPerMessage` (default: e.g. 10 XP).
  - Anti-spam: ignore messages counted as spam (rapid repeat messages). Implement a cooldown per user (configurable, e.g. 30s).
  - Ignore messages in excluded channels or by users with excluded roles.
  - Ignore bots and webhooks.
  - Option to not count messages that are only links or embeds (configurable).
  - Only count messages that pass basic checks (not commands, not very short repeated messages, not only emojis depending on config).

2. Voice XP
  - Users earn XP in discrete chunks: e.g. **only after staying in voice for a full 10 minutes** they receive `voiceChunkXP` (default 50 XP).
  - If a user leaves before the full chunk length, they receive no XP for that partial session.
  - Configurable chunk length (`voiceChunkSeconds`, default 600s) and chunk XP (`voiceChunkXP`).
  - Option to accumulate multiple chunks if they stay longer (every full chunk grants XP).
  - Exclude AFK channel, excluded channels, and excluded roles. Optionally ignore self-muted / self-deafened sessions (configurable).

3. Level progression & thresholds
  - Levels use configurable thresholds. Provide two modes:
    - **Arithmetic mode**: admin sets base increment (e.g. 500, +500 each level: 500,1000,1500,...). Provide config `levelBase` and `levelStep`.
    - **Custom list mode**: admin can provide explicit XP thresholds per level (array).
  - Provide helper functions:
    - `xpForLevel(n)` returns XP needed to reach level n.
    - `levelFromXP(xp)` returns level.
  - When user reaches a new level, send a level-up embed (nice design, emoji, mention). Optionally give a role reward per level (configurable).

4. Commands (slash + prefix)
  - `/xp profile [user]` or `!profile [user]`
  - `/xp leaderboard [page]` or `!leaderboard`
  - `/xp setrate message <xpPerMessage>`
  - `/xp setrate voice <xpPerChunk> <chunkSeconds>`
  - `/xp setmin <minMessageLength>`
  - `/xp exclude channel add|remove #channel`
  - `/xp exclude role add|remove @role`
  - `/xp toggle`
  - `/xp reset @user`
  - `/xp config`
  - `/xp setthresholds mode <arithmetic|custom>`
  - `/xp setreward add <level> @role`
  - `/xp setreward remove <level>`

5. UI, embeds & buttons
  - Profile: boutons `üîÅ Refresh`, `üèÜ Leaderboard`, `‚öôÔ∏è Config`.
  - Leaderboard: pagination avec boutons.
  - Config: toggle XP, √©diter valeurs, exclusions via select menus.
  - Utiliser des emojis pour rendre l‚Äôinterface plus claire.
  - Textes en **gras**, ```blocs de code```, couleurs d‚Äôembed.

6. JSON structures (examples)
  - `./json/levelConfig.json`
  - `./json/messageXp.json`
  - `./json/voiceSessions.json`
  (voir exemples de la version pr√©c√©dente)

7. Implementation details
  - Message XP via `messageCreate`.
  - Voice XP via `voiceStateUpdate`.
  - Level math utilitaire avec `xpForLevel` et `levelFromXP`.
  - Persistence en JSON (pas de base de donn√©es).
  - Anti-abus (spam, AFK, self-mute).
  - Role rewards automatiques.
  - Embeds propres en fran√ßais.
  - Admin UI avec boutons et modals.
  - Tests : `/xp grant`, `/xp simulate-voice`.

8. Example messages (French)
  - üéâ **F√©licitations !** ${user.tag} a atteint le niveau ${newLevel} !
  - üë§ **Profil XP** ‚Äî ${user.tag}  
    Niveau: ${level} | XP: ${xp}/${xpNext}
  - ‚úÖ **Configuration sauvegard√©e !**

End of spec.
